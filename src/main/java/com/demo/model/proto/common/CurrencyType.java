// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_type_def.proto

package com.demo.model.proto.common;

/**
 * <pre>
 * 币种定义
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.common.CurrencyType}
 */
public enum CurrencyType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知货币
   * </pre>
   *
   * <code>CurrencyNA = 0;</code>
   */
  CurrencyNA(0),
  /**
   * <pre>
   * 人民币
   * </pre>
   *
   * <code>CNY = 1;</code>
   */
  CNY(1),
  /**
   * <pre>
   * 美金
   * </pre>
   *
   * <code>USD = 2;</code>
   */
  USD(2),
  /**
   * <pre>
   * 港币
   * </pre>
   *
   * <code>HKD = 3;</code>
   */
  HKD(3),
  /**
   * <pre>
   * 欧元
   * </pre>
   *
   * <code>EUR = 4;</code>
   */
  EUR(4),
  /**
   * <pre>
   * 英镑
   * </pre>
   *
   * <code>GBP = 5;</code>
   */
  GBP(5),
  /**
   * <pre>
   * 日元
   * </pre>
   *
   * <code>JPY = 6;</code>
   */
  JPY(6),
  /**
   * <pre>
   * 澳大利亚元
   * </pre>
   *
   * <code>AUD = 7;</code>
   */
  AUD(7),
  /**
   * <pre>
   * 加拿大元
   * </pre>
   *
   * <code>CAD = 8;</code>
   */
  CAD(8),
  /**
   * <pre>
   * 瑞士法郎
   * </pre>
   *
   * <code>CHF = 9;</code>
   */
  CHF(9),
  /**
   * <pre>
   * 中国离岸人民币
   * </pre>
   *
   * <code>CNH = 10;</code>
   */
  CNH(10),
  /**
   * <pre>
   * 马来西亚令吉
   * </pre>
   *
   * <code>MYR = 11;</code>
   */
  MYR(11),
  /**
   * <pre>
   * 新加坡元
   * </pre>
   *
   * <code>SGD = 12;</code>
   */
  SGD(12),
  /**
   * <pre>
   * 新台币
   * </pre>
   *
   * <code>TWD = 13;</code>
   */
  TWD(13),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知货币
   * </pre>
   *
   * <code>CurrencyNA = 0;</code>
   */
  public static final int CurrencyNA_VALUE = 0;
  /**
   * <pre>
   * 人民币
   * </pre>
   *
   * <code>CNY = 1;</code>
   */
  public static final int CNY_VALUE = 1;
  /**
   * <pre>
   * 美金
   * </pre>
   *
   * <code>USD = 2;</code>
   */
  public static final int USD_VALUE = 2;
  /**
   * <pre>
   * 港币
   * </pre>
   *
   * <code>HKD = 3;</code>
   */
  public static final int HKD_VALUE = 3;
  /**
   * <pre>
   * 欧元
   * </pre>
   *
   * <code>EUR = 4;</code>
   */
  public static final int EUR_VALUE = 4;
  /**
   * <pre>
   * 英镑
   * </pre>
   *
   * <code>GBP = 5;</code>
   */
  public static final int GBP_VALUE = 5;
  /**
   * <pre>
   * 日元
   * </pre>
   *
   * <code>JPY = 6;</code>
   */
  public static final int JPY_VALUE = 6;
  /**
   * <pre>
   * 澳大利亚元
   * </pre>
   *
   * <code>AUD = 7;</code>
   */
  public static final int AUD_VALUE = 7;
  /**
   * <pre>
   * 加拿大元
   * </pre>
   *
   * <code>CAD = 8;</code>
   */
  public static final int CAD_VALUE = 8;
  /**
   * <pre>
   * 瑞士法郎
   * </pre>
   *
   * <code>CHF = 9;</code>
   */
  public static final int CHF_VALUE = 9;
  /**
   * <pre>
   * 中国离岸人民币
   * </pre>
   *
   * <code>CNH = 10;</code>
   */
  public static final int CNH_VALUE = 10;
  /**
   * <pre>
   * 马来西亚令吉
   * </pre>
   *
   * <code>MYR = 11;</code>
   */
  public static final int MYR_VALUE = 11;
  /**
   * <pre>
   * 新加坡元
   * </pre>
   *
   * <code>SGD = 12;</code>
   */
  public static final int SGD_VALUE = 12;
  /**
   * <pre>
   * 新台币
   * </pre>
   *
   * <code>TWD = 13;</code>
   */
  public static final int TWD_VALUE = 13;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static CurrencyType valueOf(int value) {
    return forNumber(value);
  }

  public static CurrencyType forNumber(int value) {
    switch (value) {
      case 0: return CurrencyNA;
      case 1: return CNY;
      case 2: return USD;
      case 3: return HKD;
      case 4: return EUR;
      case 5: return GBP;
      case 6: return JPY;
      case 7: return AUD;
      case 8: return CAD;
      case 9: return CHF;
      case 10: return CNH;
      case 11: return MYR;
      case 12: return SGD;
      case 13: return TWD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CurrencyType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CurrencyType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CurrencyType>() {
          public CurrencyType findValueByNumber(int number) {
            return CurrencyType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return CommonTypeDef.getDescriptor()
        .getEnumTypes().get(5);
  }

  private static final CurrencyType[] VALUES = values();

  public static CurrencyType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CurrencyType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.common.CurrencyType)
}

