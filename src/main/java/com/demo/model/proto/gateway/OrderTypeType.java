// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_type_def.proto

package com.demo.model.proto.gateway;

/**
 * <pre>
 * 委托类型 
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.gateway.OrderTypeType}
 */
public enum OrderTypeType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *未知 
   * </pre>
   *
   * <code>UNKNOWN_ORDER_STATUS = 0;</code>
   */
  UNKNOWN_ORDER_STATUS(0),
  /**
   * <pre>
   * 市价
   * </pre>
   *
   * <code>MARKET = 1;</code>
   */
  MARKET(1),
  /**
   * <pre>
   * 限价
   * </pre>
   *
   * <code>LIMIT = 2;</code>
   */
  LIMIT(2),
  /**
   * <pre>
   * 市价止损
   * </pre>
   *
   * <code>STOP_MARKET = 3;</code>
   */
  STOP_MARKET(3),
  /**
   * <pre>
   * 限价止损
   * </pre>
   *
   * <code>STOP_LIMIT = 4;</code>
   */
  STOP_LIMIT(4),
  /**
   * <pre>
   * 期权行权
   * </pre>
   *
   * <code>OPT_EXEC = 5;</code>
   */
  OPT_EXEC(5),
  /**
   * <pre>
   * 期权弃权
   * </pre>
   *
   * <code>OPT_ABANDON = 6;</code>
   */
  OPT_ABANDON(6),
  /**
   * <pre>
   * 询价
   * </pre>
   *
   * <code>REQQUOT = 7;</code>
   */
  REQQUOT(7),
  /**
   * <pre>
   * 应价
   * </pre>
   *
   * <code>RSPQUOT = 8;</code>
   */
  RSPQUOT(8),
  /**
   * <pre>
   * 冰山单
   * </pre>
   *
   * <code>ICEBERG = 9;</code>
   */
  ICEBERG(9),
  /**
   * <pre>
   * 影子单
   * </pre>
   *
   * <code>GHOST = 10;</code>
   */
  GHOST(10),
  /**
   * <pre>
   * 港交所竞价单
   * </pre>
   *
   * <code>HKEX_AUCTION = 11;</code>
   */
  HKEX_AUCTION(11),
  /**
   * <pre>
   * 互换
   * </pre>
   *
   * <code>SWAP = 12;</code>
   */
  SWAP(12),
  /**
   * <pre>
   * 证券锁定
   * </pre>
   *
   * <code>LOCK = 13;</code>
   */
  LOCK(13),
  /**
   * <pre>
   * 证券解锁
   * </pre>
   *
   * <code>UNLOCK = 14;</code>
   */
  UNLOCK(14),
  /**
   * <pre>
   * 增强限价单
   * </pre>
   *
   * <code>ENHANCE = 15;</code>
   */
  ENHANCE(15),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *未知 
   * </pre>
   *
   * <code>UNKNOWN_ORDER_STATUS = 0;</code>
   */
  public static final int UNKNOWN_ORDER_STATUS_VALUE = 0;
  /**
   * <pre>
   * 市价
   * </pre>
   *
   * <code>MARKET = 1;</code>
   */
  public static final int MARKET_VALUE = 1;
  /**
   * <pre>
   * 限价
   * </pre>
   *
   * <code>LIMIT = 2;</code>
   */
  public static final int LIMIT_VALUE = 2;
  /**
   * <pre>
   * 市价止损
   * </pre>
   *
   * <code>STOP_MARKET = 3;</code>
   */
  public static final int STOP_MARKET_VALUE = 3;
  /**
   * <pre>
   * 限价止损
   * </pre>
   *
   * <code>STOP_LIMIT = 4;</code>
   */
  public static final int STOP_LIMIT_VALUE = 4;
  /**
   * <pre>
   * 期权行权
   * </pre>
   *
   * <code>OPT_EXEC = 5;</code>
   */
  public static final int OPT_EXEC_VALUE = 5;
  /**
   * <pre>
   * 期权弃权
   * </pre>
   *
   * <code>OPT_ABANDON = 6;</code>
   */
  public static final int OPT_ABANDON_VALUE = 6;
  /**
   * <pre>
   * 询价
   * </pre>
   *
   * <code>REQQUOT = 7;</code>
   */
  public static final int REQQUOT_VALUE = 7;
  /**
   * <pre>
   * 应价
   * </pre>
   *
   * <code>RSPQUOT = 8;</code>
   */
  public static final int RSPQUOT_VALUE = 8;
  /**
   * <pre>
   * 冰山单
   * </pre>
   *
   * <code>ICEBERG = 9;</code>
   */
  public static final int ICEBERG_VALUE = 9;
  /**
   * <pre>
   * 影子单
   * </pre>
   *
   * <code>GHOST = 10;</code>
   */
  public static final int GHOST_VALUE = 10;
  /**
   * <pre>
   * 港交所竞价单
   * </pre>
   *
   * <code>HKEX_AUCTION = 11;</code>
   */
  public static final int HKEX_AUCTION_VALUE = 11;
  /**
   * <pre>
   * 互换
   * </pre>
   *
   * <code>SWAP = 12;</code>
   */
  public static final int SWAP_VALUE = 12;
  /**
   * <pre>
   * 证券锁定
   * </pre>
   *
   * <code>LOCK = 13;</code>
   */
  public static final int LOCK_VALUE = 13;
  /**
   * <pre>
   * 证券解锁
   * </pre>
   *
   * <code>UNLOCK = 14;</code>
   */
  public static final int UNLOCK_VALUE = 14;
  /**
   * <pre>
   * 增强限价单
   * </pre>
   *
   * <code>ENHANCE = 15;</code>
   */
  public static final int ENHANCE_VALUE = 15;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static OrderTypeType valueOf(int value) {
    return forNumber(value);
  }

  public static OrderTypeType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_ORDER_STATUS;
      case 1: return MARKET;
      case 2: return LIMIT;
      case 3: return STOP_MARKET;
      case 4: return STOP_LIMIT;
      case 5: return OPT_EXEC;
      case 6: return OPT_ABANDON;
      case 7: return REQQUOT;
      case 8: return RSPQUOT;
      case 9: return ICEBERG;
      case 10: return GHOST;
      case 11: return HKEX_AUCTION;
      case 12: return SWAP;
      case 13: return LOCK;
      case 14: return UNLOCK;
      case 15: return ENHANCE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OrderTypeType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OrderTypeType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OrderTypeType>() {
          public OrderTypeType findValueByNumber(int number) {
            return OrderTypeType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeTypeDef.getDescriptor()
        .getEnumTypes().get(2);
  }

  private static final OrderTypeType[] VALUES = values();

  public static OrderTypeType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OrderTypeType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.gateway.OrderTypeType)
}

