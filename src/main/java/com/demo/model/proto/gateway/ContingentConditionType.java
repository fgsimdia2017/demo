// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_type_def.proto

package com.demo.model.proto.gateway;

/**
 * <pre>
 * 触发条件类型
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.gateway.ContingentConditionType}
 */
public enum ContingentConditionType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知的触发条件
   * </pre>
   *
   * <code>UNKNOWN_CONTINGENT = 0;</code>
   */
  UNKNOWN_CONTINGENT(0),
  /**
   * <pre>
   * 立即
   * </pre>
   *
   * <code>IMMEDIATELY = 1;</code>
   */
  IMMEDIATELY(1),
  /**
   * <pre>
   * 止损
   * </pre>
   *
   * <code>TOUCH = 2;</code>
   */
  TOUCH(2),
  /**
   * <pre>
   * 止盈
   * </pre>
   *
   * <code>TOUCH_PROFIT = 3;</code>
   */
  TOUCH_PROFIT(3),
  /**
   * <pre>
   * 预埋单
   * </pre>
   *
   * <code>PARKED_ORDER = 4;</code>
   */
  PARKED_ORDER(4),
  /**
   * <pre>
   * 最新价大于条件价
   * </pre>
   *
   * <code>LAST_PRICE_GT_STOP_PRICE = 5;</code>
   */
  LAST_PRICE_GT_STOP_PRICE(5),
  /**
   * <pre>
   * 最新价大于等于条件价
   * </pre>
   *
   * <code>LAST_PRICE_GE_STOP_PRICE = 6;</code>
   */
  LAST_PRICE_GE_STOP_PRICE(6),
  /**
   * <pre>
   * 最新价小于条件价
   * </pre>
   *
   * <code>LAST_PRICE_LT_STOP_PRICE = 7;</code>
   */
  LAST_PRICE_LT_STOP_PRICE(7),
  /**
   * <pre>
   * 最新价小于等于条件价
   * </pre>
   *
   * <code>LAST_PRICE_LE_STOP_PRICE = 8;</code>
   */
  LAST_PRICE_LE_STOP_PRICE(8),
  /**
   * <pre>
   * 卖一价大于条件价
   * </pre>
   *
   * <code>ASK_PRICE_GT_STOP_PRICE = 9;</code>
   */
  ASK_PRICE_GT_STOP_PRICE(9),
  /**
   * <pre>
   * 卖一价大于等于条件价
   * </pre>
   *
   * <code>ASK_PRICE_GE_STOP_PRICE = 10;</code>
   */
  ASK_PRICE_GE_STOP_PRICE(10),
  /**
   * <pre>
   * 卖一价小于条件价
   * </pre>
   *
   * <code>ASK_PRICE_LT_STOP_PRICE = 11;</code>
   */
  ASK_PRICE_LT_STOP_PRICE(11),
  /**
   * <pre>
   * 卖一价小于等于条件价
   * </pre>
   *
   * <code>ASK_PRICE_LE_STOP_PRICE = 12;</code>
   */
  ASK_PRICE_LE_STOP_PRICE(12),
  /**
   * <pre>
   * 买一价大于条件价
   * </pre>
   *
   * <code>BID_PRICE_GT_STOP_PRICE = 13;</code>
   */
  BID_PRICE_GT_STOP_PRICE(13),
  /**
   * <pre>
   * 买一价大于等于条件价
   * </pre>
   *
   * <code>BID_PRICE_GE_STOP_PRICE = 14;</code>
   */
  BID_PRICE_GE_STOP_PRICE(14),
  /**
   * <pre>
   * 买一价小于条件价
   * </pre>
   *
   * <code>BID_PRICE_LT_STOP_PRICE = 15;</code>
   */
  BID_PRICE_LT_STOP_PRICE(15),
  /**
   * <pre>
   * 买一价小于等于条件价
   * </pre>
   *
   * <code>BID_PRICE_LE_STOP_PRICE = 16;</code>
   */
  BID_PRICE_LE_STOP_PRICE(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知的触发条件
   * </pre>
   *
   * <code>UNKNOWN_CONTINGENT = 0;</code>
   */
  public static final int UNKNOWN_CONTINGENT_VALUE = 0;
  /**
   * <pre>
   * 立即
   * </pre>
   *
   * <code>IMMEDIATELY = 1;</code>
   */
  public static final int IMMEDIATELY_VALUE = 1;
  /**
   * <pre>
   * 止损
   * </pre>
   *
   * <code>TOUCH = 2;</code>
   */
  public static final int TOUCH_VALUE = 2;
  /**
   * <pre>
   * 止盈
   * </pre>
   *
   * <code>TOUCH_PROFIT = 3;</code>
   */
  public static final int TOUCH_PROFIT_VALUE = 3;
  /**
   * <pre>
   * 预埋单
   * </pre>
   *
   * <code>PARKED_ORDER = 4;</code>
   */
  public static final int PARKED_ORDER_VALUE = 4;
  /**
   * <pre>
   * 最新价大于条件价
   * </pre>
   *
   * <code>LAST_PRICE_GT_STOP_PRICE = 5;</code>
   */
  public static final int LAST_PRICE_GT_STOP_PRICE_VALUE = 5;
  /**
   * <pre>
   * 最新价大于等于条件价
   * </pre>
   *
   * <code>LAST_PRICE_GE_STOP_PRICE = 6;</code>
   */
  public static final int LAST_PRICE_GE_STOP_PRICE_VALUE = 6;
  /**
   * <pre>
   * 最新价小于条件价
   * </pre>
   *
   * <code>LAST_PRICE_LT_STOP_PRICE = 7;</code>
   */
  public static final int LAST_PRICE_LT_STOP_PRICE_VALUE = 7;
  /**
   * <pre>
   * 最新价小于等于条件价
   * </pre>
   *
   * <code>LAST_PRICE_LE_STOP_PRICE = 8;</code>
   */
  public static final int LAST_PRICE_LE_STOP_PRICE_VALUE = 8;
  /**
   * <pre>
   * 卖一价大于条件价
   * </pre>
   *
   * <code>ASK_PRICE_GT_STOP_PRICE = 9;</code>
   */
  public static final int ASK_PRICE_GT_STOP_PRICE_VALUE = 9;
  /**
   * <pre>
   * 卖一价大于等于条件价
   * </pre>
   *
   * <code>ASK_PRICE_GE_STOP_PRICE = 10;</code>
   */
  public static final int ASK_PRICE_GE_STOP_PRICE_VALUE = 10;
  /**
   * <pre>
   * 卖一价小于条件价
   * </pre>
   *
   * <code>ASK_PRICE_LT_STOP_PRICE = 11;</code>
   */
  public static final int ASK_PRICE_LT_STOP_PRICE_VALUE = 11;
  /**
   * <pre>
   * 卖一价小于等于条件价
   * </pre>
   *
   * <code>ASK_PRICE_LE_STOP_PRICE = 12;</code>
   */
  public static final int ASK_PRICE_LE_STOP_PRICE_VALUE = 12;
  /**
   * <pre>
   * 买一价大于条件价
   * </pre>
   *
   * <code>BID_PRICE_GT_STOP_PRICE = 13;</code>
   */
  public static final int BID_PRICE_GT_STOP_PRICE_VALUE = 13;
  /**
   * <pre>
   * 买一价大于等于条件价
   * </pre>
   *
   * <code>BID_PRICE_GE_STOP_PRICE = 14;</code>
   */
  public static final int BID_PRICE_GE_STOP_PRICE_VALUE = 14;
  /**
   * <pre>
   * 买一价小于条件价
   * </pre>
   *
   * <code>BID_PRICE_LT_STOP_PRICE = 15;</code>
   */
  public static final int BID_PRICE_LT_STOP_PRICE_VALUE = 15;
  /**
   * <pre>
   * 买一价小于等于条件价
   * </pre>
   *
   * <code>BID_PRICE_LE_STOP_PRICE = 16;</code>
   */
  public static final int BID_PRICE_LE_STOP_PRICE_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static ContingentConditionType valueOf(int value) {
    return forNumber(value);
  }

  public static ContingentConditionType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_CONTINGENT;
      case 1: return IMMEDIATELY;
      case 2: return TOUCH;
      case 3: return TOUCH_PROFIT;
      case 4: return PARKED_ORDER;
      case 5: return LAST_PRICE_GT_STOP_PRICE;
      case 6: return LAST_PRICE_GE_STOP_PRICE;
      case 7: return LAST_PRICE_LT_STOP_PRICE;
      case 8: return LAST_PRICE_LE_STOP_PRICE;
      case 9: return ASK_PRICE_GT_STOP_PRICE;
      case 10: return ASK_PRICE_GE_STOP_PRICE;
      case 11: return ASK_PRICE_LT_STOP_PRICE;
      case 12: return ASK_PRICE_LE_STOP_PRICE;
      case 13: return BID_PRICE_GT_STOP_PRICE;
      case 14: return BID_PRICE_GE_STOP_PRICE;
      case 15: return BID_PRICE_LT_STOP_PRICE;
      case 16: return BID_PRICE_LE_STOP_PRICE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ContingentConditionType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ContingentConditionType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ContingentConditionType>() {
          public ContingentConditionType findValueByNumber(int number) {
            return ContingentConditionType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeTypeDef.getDescriptor()
        .getEnumTypes().get(12);
  }

  private static final ContingentConditionType[] VALUES = values();

  public static ContingentConditionType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ContingentConditionType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.gateway.ContingentConditionType)
}

