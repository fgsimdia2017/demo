// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_type_def.proto

package com.demo.model.proto.gateway;

/**
 * <pre>
 * 组合合约组合类型
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.gateway.CombinationType}
 */
public enum CombinationType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知
   * </pre>
   *
   * <code>UNKNOWN_COMB = 0;</code>
   */
  UNKNOWN_COMB(0),
  /**
   * <pre>
   * 期货组合
   * </pre>
   *
   * <code>FUTURE = 1;</code>
   */
  FUTURE(1),
  /**
   * <pre>
   * 垂直价差BUL
   * </pre>
   *
   * <code>COMBT_BUL = 2;</code>
   */
  COMBT_BUL(2),
  /**
   * <pre>
   * 垂直价差BER
   * </pre>
   *
   * <code>COMBT_BER = 3;</code>
   */
  COMBT_BER(3),
  /**
   * <pre>
   * 跨式组合
   * </pre>
   *
   * <code>COMBT_STD = 4;</code>
   */
  COMBT_STD(4),
  /**
   * <pre>
   * 宽跨式组合
   * </pre>
   *
   * <code>COMBT_STG = 5;</code>
   */
  COMBT_STG(5),
  /**
   * <pre>
   * 备兑组合
   * </pre>
   *
   * <code>COMBT_PRT = 6;</code>
   */
  COMBT_PRT(6),
  /**
   * <pre>
   * 时间价差组合
   * </pre>
   *
   * <code>COMBT_CLD = 7;</code>
   */
  COMBT_CLD(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知
   * </pre>
   *
   * <code>UNKNOWN_COMB = 0;</code>
   */
  public static final int UNKNOWN_COMB_VALUE = 0;
  /**
   * <pre>
   * 期货组合
   * </pre>
   *
   * <code>FUTURE = 1;</code>
   */
  public static final int FUTURE_VALUE = 1;
  /**
   * <pre>
   * 垂直价差BUL
   * </pre>
   *
   * <code>COMBT_BUL = 2;</code>
   */
  public static final int COMBT_BUL_VALUE = 2;
  /**
   * <pre>
   * 垂直价差BER
   * </pre>
   *
   * <code>COMBT_BER = 3;</code>
   */
  public static final int COMBT_BER_VALUE = 3;
  /**
   * <pre>
   * 跨式组合
   * </pre>
   *
   * <code>COMBT_STD = 4;</code>
   */
  public static final int COMBT_STD_VALUE = 4;
  /**
   * <pre>
   * 宽跨式组合
   * </pre>
   *
   * <code>COMBT_STG = 5;</code>
   */
  public static final int COMBT_STG_VALUE = 5;
  /**
   * <pre>
   * 备兑组合
   * </pre>
   *
   * <code>COMBT_PRT = 6;</code>
   */
  public static final int COMBT_PRT_VALUE = 6;
  /**
   * <pre>
   * 时间价差组合
   * </pre>
   *
   * <code>COMBT_CLD = 7;</code>
   */
  public static final int COMBT_CLD_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static CombinationType valueOf(int value) {
    return forNumber(value);
  }

  public static CombinationType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_COMB;
      case 1: return FUTURE;
      case 2: return COMBT_BUL;
      case 3: return COMBT_BER;
      case 4: return COMBT_STD;
      case 5: return COMBT_STG;
      case 6: return COMBT_PRT;
      case 7: return COMBT_CLD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CombinationType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CombinationType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CombinationType>() {
          public CombinationType findValueByNumber(int number) {
            return CombinationType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeTypeDef.getDescriptor()
        .getEnumTypes().get(16);
  }

  private static final CombinationType[] VALUES = values();

  public static CombinationType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CombinationType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.gateway.CombinationType)
}

