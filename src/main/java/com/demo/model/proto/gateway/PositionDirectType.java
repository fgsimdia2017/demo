// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_type_def.proto

package com.demo.model.proto.gateway;

/**
 * <pre>
 * 持仓方向
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.gateway.PositionDirectType}
 */
public enum PositionDirectType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知持仓类型
   * </pre>
   *
   * <code>UNKNOWN_DIRECT = 0;</code>
   */
  UNKNOWN_DIRECT(0),
  /**
   * <pre>
   * 净持仓 净持仓是指某个商品某个月份合约持仓的多单和空单相抵后的余额，称为净持仓，简称净仓,
   * </pre>
   *
   * <code>NET = 1;</code>
   */
  NET(1),
  /**
   * <pre>
   * 比如某个商品某月份合约持有多单20手，空单15手，则净持仓就是5手多单
   * </pre>
   *
   * <code>LONG = 2;</code>
   */
  LONG(2),
  /**
   * <pre>
   * 空头持仓
   * </pre>
   *
   * <code>SHORT = 3;</code>
   */
  SHORT(3),
  /**
   * <pre>
   * 综合持仓
   * </pre>
   *
   * <code>GROSS = 4;</code>
   */
  GROSS(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知持仓类型
   * </pre>
   *
   * <code>UNKNOWN_DIRECT = 0;</code>
   */
  public static final int UNKNOWN_DIRECT_VALUE = 0;
  /**
   * <pre>
   * 净持仓 净持仓是指某个商品某个月份合约持仓的多单和空单相抵后的余额，称为净持仓，简称净仓,
   * </pre>
   *
   * <code>NET = 1;</code>
   */
  public static final int NET_VALUE = 1;
  /**
   * <pre>
   * 比如某个商品某月份合约持有多单20手，空单15手，则净持仓就是5手多单
   * </pre>
   *
   * <code>LONG = 2;</code>
   */
  public static final int LONG_VALUE = 2;
  /**
   * <pre>
   * 空头持仓
   * </pre>
   *
   * <code>SHORT = 3;</code>
   */
  public static final int SHORT_VALUE = 3;
  /**
   * <pre>
   * 综合持仓
   * </pre>
   *
   * <code>GROSS = 4;</code>
   */
  public static final int GROSS_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static PositionDirectType valueOf(int value) {
    return forNumber(value);
  }

  public static PositionDirectType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_DIRECT;
      case 1: return NET;
      case 2: return LONG;
      case 3: return SHORT;
      case 4: return GROSS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PositionDirectType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PositionDirectType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PositionDirectType>() {
          public PositionDirectType findValueByNumber(int number) {
            return PositionDirectType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeTypeDef.getDescriptor()
        .getEnumTypes().get(4);
  }

  private static final PositionDirectType[] VALUES = values();

  public static PositionDirectType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PositionDirectType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.gateway.PositionDirectType)
}

