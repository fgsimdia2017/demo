// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_type_def.proto

package com.demo.model.proto.gateway;

/**
 * <pre>
 * 投保标志
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.gateway.HedgeFlagType}
 */
public enum HedgeFlagType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知的投保标志
   * </pre>
   *
   * <code>UNKNOWN_HEDGE = 0;</code>
   */
  UNKNOWN_HEDGE(0),
  /**
   * <pre>
   * 保值
   * </pre>
   *
   * <code>HEDGING = 1;</code>
   */
  HEDGING(1),
  /**
   * <pre>
   * 投机   即风险单
   * </pre>
   *
   * <code>SPECULATE = 2;</code>
   */
  SPECULATE(2),
  /**
   * <pre>
   * 套利
   * </pre>
   *
   * <code>ARBITRAGE = 3;</code>
   */
  ARBITRAGE(3),
  /**
   * <pre>
   * 做市商
   * </pre>
   *
   * <code>MARKETMAKER = 4;</code>
   */
  MARKETMAKER(4),
  /**
   * <pre>
   * 备兑
   * </pre>
   *
   * <code>RESERVE = 5;</code>
   */
  RESERVE(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知的投保标志
   * </pre>
   *
   * <code>UNKNOWN_HEDGE = 0;</code>
   */
  public static final int UNKNOWN_HEDGE_VALUE = 0;
  /**
   * <pre>
   * 保值
   * </pre>
   *
   * <code>HEDGING = 1;</code>
   */
  public static final int HEDGING_VALUE = 1;
  /**
   * <pre>
   * 投机   即风险单
   * </pre>
   *
   * <code>SPECULATE = 2;</code>
   */
  public static final int SPECULATE_VALUE = 2;
  /**
   * <pre>
   * 套利
   * </pre>
   *
   * <code>ARBITRAGE = 3;</code>
   */
  public static final int ARBITRAGE_VALUE = 3;
  /**
   * <pre>
   * 做市商
   * </pre>
   *
   * <code>MARKETMAKER = 4;</code>
   */
  public static final int MARKETMAKER_VALUE = 4;
  /**
   * <pre>
   * 备兑
   * </pre>
   *
   * <code>RESERVE = 5;</code>
   */
  public static final int RESERVE_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static HedgeFlagType valueOf(int value) {
    return forNumber(value);
  }

  public static HedgeFlagType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_HEDGE;
      case 1: return HEDGING;
      case 2: return SPECULATE;
      case 3: return ARBITRAGE;
      case 4: return MARKETMAKER;
      case 5: return RESERVE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<HedgeFlagType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      HedgeFlagType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<HedgeFlagType>() {
          public HedgeFlagType findValueByNumber(int number) {
            return HedgeFlagType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeTypeDef.getDescriptor()
        .getEnumTypes().get(7);
  }

  private static final HedgeFlagType[] VALUES = values();

  public static HedgeFlagType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private HedgeFlagType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.gateway.HedgeFlagType)
}

