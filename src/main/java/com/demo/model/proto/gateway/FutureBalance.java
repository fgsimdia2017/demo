// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_msg_def.proto

package com.demo.model.proto.gateway;

/**
 * Protobuf type {@code com.demo.model.proto.gateway.FutureBalance}
 */
public  final class FutureBalance extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.demo.model.proto.gateway.FutureBalance)
    FutureBalanceOrBuilder {
  // Use FutureBalance.newBuilder() to construct.
  private FutureBalance(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FutureBalance() {
    account_ = "";
    name_ = "";
    precision_ = 0;
    currency_ = 0;
    preBalance_ = 0L;
    preUnexpProfit_ = 0L;
    preLmePositionProfit_ = 0L;
    preEquity_ = 0L;
    preAvailable_ = 0L;
    preMaketEquity_ = 0L;
    available_ = 0L;
    withDraw_ = 0L;
    adjustValue_ = 0L;
    pledged_ = 0L;
    commission_ = 0L;
    fee_ = 0L;
    accountFee_ = 0L;
    buyFreeze_ = 0L;
    buyFreezeMargin_ = 0L;
    freezeFee_ = 0L;
    sellFreeze_ = 0L;
    sellFreezeMargin_ = 0L;
    closeProfit_ = 0L;
    unexpProfit_ = 0L;
    expProfit_ = 0L;
    positionProfit_ = 0L;
    lmePositionProfit_ = 0L;
    initialMargin_ = 0L;
    maintenanceMargin_ = 0L;
    upperInitalMargin_ = 0L;
    upperMaintenanceMargin_ = 0L;
    discount_ = 0L;
    deposit_ = 0L;
    drawing_ = 0L;
    swapInValue_ = 0L;
    swapOutValue_ = 0L;
    premiumIncome_ = 0L;
    premiumPay_ = 0L;
    balance_ = 0L;
    equity_ = 0L;
    marketEquity_ = 0L;
    authValue_ = 0L;
    exchangeRate_ = 0L;
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private FutureBalance(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    int mutable_bitField1_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            account_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 24: {

            precision_ = input.readUInt32();
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            currency_ = rawValue;
            break;
          }
          case 40: {

            preBalance_ = input.readInt64();
            break;
          }
          case 48: {

            preUnexpProfit_ = input.readInt64();
            break;
          }
          case 56: {

            preLmePositionProfit_ = input.readInt64();
            break;
          }
          case 64: {

            preEquity_ = input.readInt64();
            break;
          }
          case 72: {

            preAvailable_ = input.readInt64();
            break;
          }
          case 80: {

            preMaketEquity_ = input.readInt64();
            break;
          }
          case 88: {

            available_ = input.readInt64();
            break;
          }
          case 96: {

            withDraw_ = input.readInt64();
            break;
          }
          case 104: {

            adjustValue_ = input.readInt64();
            break;
          }
          case 112: {

            pledged_ = input.readInt64();
            break;
          }
          case 120: {

            commission_ = input.readInt64();
            break;
          }
          case 128: {

            fee_ = input.readInt64();
            break;
          }
          case 136: {

            accountFee_ = input.readInt64();
            break;
          }
          case 144: {

            buyFreeze_ = input.readInt64();
            break;
          }
          case 152: {

            buyFreezeMargin_ = input.readInt64();
            break;
          }
          case 160: {

            freezeFee_ = input.readInt64();
            break;
          }
          case 168: {

            sellFreeze_ = input.readInt64();
            break;
          }
          case 176: {

            sellFreezeMargin_ = input.readInt64();
            break;
          }
          case 184: {

            closeProfit_ = input.readInt64();
            break;
          }
          case 192: {

            unexpProfit_ = input.readInt64();
            break;
          }
          case 200: {

            expProfit_ = input.readInt64();
            break;
          }
          case 208: {

            positionProfit_ = input.readInt64();
            break;
          }
          case 216: {

            lmePositionProfit_ = input.readInt64();
            break;
          }
          case 224: {

            initialMargin_ = input.readInt64();
            break;
          }
          case 232: {

            maintenanceMargin_ = input.readInt64();
            break;
          }
          case 240: {

            upperInitalMargin_ = input.readInt64();
            break;
          }
          case 248: {

            upperMaintenanceMargin_ = input.readInt64();
            break;
          }
          case 256: {

            discount_ = input.readInt64();
            break;
          }
          case 264: {

            deposit_ = input.readInt64();
            break;
          }
          case 272: {

            drawing_ = input.readInt64();
            break;
          }
          case 280: {

            swapInValue_ = input.readInt64();
            break;
          }
          case 288: {

            swapOutValue_ = input.readInt64();
            break;
          }
          case 296: {

            premiumIncome_ = input.readInt64();
            break;
          }
          case 304: {

            premiumPay_ = input.readInt64();
            break;
          }
          case 312: {

            balance_ = input.readInt64();
            break;
          }
          case 320: {

            equity_ = input.readInt64();
            break;
          }
          case 328: {

            marketEquity_ = input.readInt64();
            break;
          }
          case 336: {

            authValue_ = input.readInt64();
            break;
          }
          case 344: {

            exchangeRate_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return TradeMsgDef.internal_static_com_demo_model_proto_gateway_FutureBalance_descriptor;
  }

  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return TradeMsgDef.internal_static_com_demo_model_proto_gateway_FutureBalance_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            FutureBalance.class, Builder.class);
  }

  public static final int ACCOUNT_FIELD_NUMBER = 1;
  private volatile Object account_;
  /**
   * <pre>
   * 投资者账户
   * </pre>
   *
   * <code>optional string account = 1;</code>
   */
  public String getAccount() {
    Object ref = account_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      account_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 投资者账户
   * </pre>
   *
   * <code>optional string account = 1;</code>
   */
  public com.google.protobuf.ByteString
      getAccountBytes() {
    Object ref = account_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      account_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private volatile Object name_;
  /**
   * <pre>
   * 投资者名称
   * </pre>
   *
   * <code>optional string name = 2;</code>
   */
  public String getName() {
    Object ref = name_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 投资者名称
   * </pre>
   *
   * <code>optional string name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    Object ref = name_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRECISION_FIELD_NUMBER = 3;
  private int precision_;
  /**
   * <pre>
   * 精度
   * </pre>
   *
   * <code>optional uint32 precision = 3;</code>
   */
  public int getPrecision() {
    return precision_;
  }

  public static final int CURRENCY_FIELD_NUMBER = 4;
  private int currency_;
  /**
   * <pre>
   * 币种
   * </pre>
   *
   * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
   */
  public int getCurrencyValue() {
    return currency_;
  }
  /**
   * <pre>
   * 币种
   * </pre>
   *
   * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
   */
  public com.demo.model.proto.trade.common.CurrencyType getCurrency() {
    com.demo.model.proto.trade.common.CurrencyType result = com.demo.model.proto.trade.common.CurrencyType.valueOf(currency_);
    return result == null ? com.demo.model.proto.trade.common.CurrencyType.UNRECOGNIZED : result;
  }

  public static final int PRE_BALANCE_FIELD_NUMBER = 5;
  private long preBalance_;
  /**
   * <pre>
   * 昨结
   * </pre>
   *
   * <code>optional int64 pre_balance = 5;</code>
   */
  public long getPreBalance() {
    return preBalance_;
  }

  public static final int PRE_UNEXP_PROFIT_FIELD_NUMBER = 6;
  private long preUnexpProfit_;
  /**
   * <pre>
   * 上日未到期平盈
   * </pre>
   *
   * <code>optional int64 pre_unexp_profit = 6;</code>
   */
  public long getPreUnexpProfit() {
    return preUnexpProfit_;
  }

  public static final int PRE_LME_POSITION_PROFIT_FIELD_NUMBER = 7;
  private long preLmePositionProfit_;
  /**
   * <pre>
   * 上日LME持仓平盈
   * </pre>
   *
   * <code>optional int64 pre_lme_position_profit = 7;</code>
   */
  public long getPreLmePositionProfit() {
    return preLmePositionProfit_;
  }

  public static final int PRE_EQUITY_FIELD_NUMBER = 8;
  private long preEquity_;
  /**
   * <pre>
   * 上日权益
   * </pre>
   *
   * <code>optional int64 pre_equity = 8;</code>
   */
  public long getPreEquity() {
    return preEquity_;
  }

  public static final int PRE_AVAILABLE_FIELD_NUMBER = 9;
  private long preAvailable_;
  /**
   * <pre>
   * 昨可用
   * </pre>
   *
   * <code>optional int64 pre_available = 9;</code>
   */
  public long getPreAvailable() {
    return preAvailable_;
  }

  public static final int PRE_MAKET_EQUITY_FIELD_NUMBER = 10;
  private long preMaketEquity_;
  /**
   * <pre>
   * 上日市值权益(动态盈亏)
   * </pre>
   *
   * <code>optional int64 pre_maket_equity = 10;</code>
   */
  public long getPreMaketEquity() {
    return preMaketEquity_;
  }

  public static final int AVAILABLE_FIELD_NUMBER = 11;
  private long available_;
  /**
   * <pre>
   * 可用
   * </pre>
   *
   * <code>optional int64 available = 11;</code>
   */
  public long getAvailable() {
    return available_;
  }

  public static final int WITH_DRAW_FIELD_NUMBER = 12;
  private long withDraw_;
  /**
   * <pre>
   * 可取
   * </pre>
   *
   * <code>optional int64 with_draw = 12;</code>
   */
  public long getWithDraw() {
    return withDraw_;
  }

  public static final int ADJUST_VALUE_FIELD_NUMBER = 13;
  private long adjustValue_;
  /**
   * <pre>
   * 资金调整
   * </pre>
   *
   * <code>optional int64 adjust_value = 13;</code>
   */
  public long getAdjustValue() {
    return adjustValue_;
  }

  public static final int PLEDGED_FIELD_NUMBER = 14;
  private long pledged_;
  /**
   * <pre>
   * 质押资金
   * </pre>
   *
   * <code>optional int64 pledged = 14;</code>
   */
  public long getPledged() {
    return pledged_;
  }

  public static final int COMMISSION_FIELD_NUMBER = 15;
  private long commission_;
  /**
   * <pre>
   * 手续费
   * </pre>
   *
   * <code>optional int64 commission = 15;</code>
   */
  public long getCommission() {
    return commission_;
  }

  public static final int FEE_FIELD_NUMBER = 16;
  private long fee_;
  /**
   * <pre>
   * 交易费
   * </pre>
   *
   * <code>optional int64 fee = 16;</code>
   */
  public long getFee() {
    return fee_;
  }

  public static final int ACCOUNT_FEE_FIELD_NUMBER = 17;
  private long accountFee_;
  /**
   * <pre>
   * 客户手续费
   * </pre>
   *
   * <code>optional int64 account_fee = 17;</code>
   */
  public long getAccountFee() {
    return accountFee_;
  }

  public static final int BUY_FREEZE_FIELD_NUMBER = 18;
  private long buyFreeze_;
  /**
   * <pre>
   * 买入冻结
   * </pre>
   *
   * <code>optional int64 buy_freeze = 18;</code>
   */
  public long getBuyFreeze() {
    return buyFreeze_;
  }

  public static final int BUY_FREEZE_MARGIN_FIELD_NUMBER = 19;
  private long buyFreezeMargin_;
  /**
   * <pre>
   * 冻结保证金
   * </pre>
   *
   * <code>optional int64 buy_freeze_margin = 19;</code>
   */
  public long getBuyFreezeMargin() {
    return buyFreezeMargin_;
  }

  public static final int FREEZE_FEE_FIELD_NUMBER = 20;
  private long freezeFee_;
  /**
   * <pre>
   * 冻结费用
   * </pre>
   *
   * <code>optional int64 freeze_fee = 20;</code>
   */
  public long getFreezeFee() {
    return freezeFee_;
  }

  public static final int SELL_FREEZE_FIELD_NUMBER = 21;
  private long sellFreeze_;
  /**
   * <pre>
   * 卖出冻结
   * </pre>
   *
   * <code>optional int64 sell_freeze = 21;</code>
   */
  public long getSellFreeze() {
    return sellFreeze_;
  }

  public static final int SELL_FREEZE_MARGIN_FIELD_NUMBER = 22;
  private long sellFreezeMargin_;
  /**
   * <pre>
   * 卖出冻结保证金
   * </pre>
   *
   * <code>optional int64 sell_freeze_margin = 22;</code>
   */
  public long getSellFreezeMargin() {
    return sellFreezeMargin_;
  }

  public static final int CLOSE_PROFIT_FIELD_NUMBER = 23;
  private long closeProfit_;
  /**
   * <pre>
   * 平仓盈亏
   * </pre>
   *
   * <code>optional int64 close_profit = 23;</code>
   */
  public long getCloseProfit() {
    return closeProfit_;
  }

  public static final int UNEXP_PROFIT_FIELD_NUMBER = 24;
  private long unexpProfit_;
  /**
   * <pre>
   * 未到期平盈
   * </pre>
   *
   * <code>optional int64 unexp_profit = 24;</code>
   */
  public long getUnexpProfit() {
    return unexpProfit_;
  }

  public static final int EXP_PROFIT_FIELD_NUMBER = 25;
  private long expProfit_;
  /**
   * <pre>
   * 到期平仓盈亏
   * </pre>
   *
   * <code>optional int64 exp_profit = 25;</code>
   */
  public long getExpProfit() {
    return expProfit_;
  }

  public static final int POSITION_PROFIT_FIELD_NUMBER = 26;
  private long positionProfit_;
  /**
   * <pre>
   * 不含LME持仓盈亏
   * </pre>
   *
   * <code>optional int64 position_profit = 26;</code>
   */
  public long getPositionProfit() {
    return positionProfit_;
  }

  public static final int LME_POSITION_PROFIT_FIELD_NUMBER = 27;
  private long lmePositionProfit_;
  /**
   * <pre>
   * LME持仓盈亏
   * </pre>
   *
   * <code>optional int64 lme_position_profit = 27;</code>
   */
  public long getLmePositionProfit() {
    return lmePositionProfit_;
  }

  public static final int INITIAL_MARGIN_FIELD_NUMBER = 28;
  private long initialMargin_;
  /**
   * <pre>
   * 初始保证金
   * </pre>
   *
   * <code>optional int64 initial_margin = 28;</code>
   */
  public long getInitialMargin() {
    return initialMargin_;
  }

  public static final int MAINTENANCE_MARGIN_FIELD_NUMBER = 29;
  private long maintenanceMargin_;
  /**
   * <pre>
   * 维持保证金
   * </pre>
   *
   * <code>optional int64 maintenance_margin = 29;</code>
   */
  public long getMaintenanceMargin() {
    return maintenanceMargin_;
  }

  public static final int UPPER_INITAL_MARGIN_FIELD_NUMBER = 30;
  private long upperInitalMargin_;
  /**
   * <pre>
   * 上手初始保证金
   * </pre>
   *
   * <code>optional int64 upper_inital_margin = 30;</code>
   */
  public long getUpperInitalMargin() {
    return upperInitalMargin_;
  }

  public static final int UPPER_MAINTENANCE_MARGIN_FIELD_NUMBER = 31;
  private long upperMaintenanceMargin_;
  /**
   * <pre>
   * 上手维持保证金
   * </pre>
   *
   * <code>optional int64 upper_maintenance_margin = 31;</code>
   */
  public long getUpperMaintenanceMargin() {
    return upperMaintenanceMargin_;
  }

  public static final int DISCOUNT_FIELD_NUMBER = 32;
  private long discount_;
  /**
   * <pre>
   * LME贴现
   * </pre>
   *
   * <code>optional int64 discount = 32;</code>
   */
  public long getDiscount() {
    return discount_;
  }

  public static final int DEPOSIT_FIELD_NUMBER = 33;
  private long deposit_;
  /**
   * <pre>
   * 入金
   * </pre>
   *
   * <code>optional int64 deposit = 33;</code>
   */
  public long getDeposit() {
    return deposit_;
  }

  public static final int DRAWING_FIELD_NUMBER = 34;
  private long drawing_;
  /**
   * <pre>
   * 出金
   * </pre>
   *
   * <code>optional int64 drawing = 34;</code>
   */
  public long getDrawing() {
    return drawing_;
  }

  public static final int SWAP_IN_VALUE_FIELD_NUMBER = 35;
  private long swapInValue_;
  /**
   * <pre>
   * 汇入资金
   * </pre>
   *
   * <code>optional int64 swap_in_value = 35;</code>
   */
  public long getSwapInValue() {
    return swapInValue_;
  }

  public static final int SWAP_OUT_VALUE_FIELD_NUMBER = 36;
  private long swapOutValue_;
  /**
   * <pre>
   * 汇出资金
   * </pre>
   *
   * <code>optional int64 swap_out_value = 36;</code>
   */
  public long getSwapOutValue() {
    return swapOutValue_;
  }

  public static final int PREMIUM_INCOME_FIELD_NUMBER = 37;
  private long premiumIncome_;
  /**
   * <pre>
   * 权利金收取
   * </pre>
   *
   * <code>optional int64 premium_income = 37;</code>
   */
  public long getPremiumIncome() {
    return premiumIncome_;
  }

  public static final int PREMIUM_PAY_FIELD_NUMBER = 38;
  private long premiumPay_;
  /**
   * <pre>
   * 权利金支付
   * </pre>
   *
   * <code>optional int64 premium_pay = 38;</code>
   */
  public long getPremiumPay() {
    return premiumPay_;
  }

  public static final int BALANCE_FIELD_NUMBER = 39;
  private long balance_;
  /**
   * <pre>
   * 结存
   * </pre>
   *
   * <code>optional int64 balance = 39;</code>
   */
  public long getBalance() {
    return balance_;
  }

  public static final int EQUITY_FIELD_NUMBER = 40;
  private long equity_;
  /**
   * <pre>
   * 当日权益
   * </pre>
   *
   * <code>optional int64 equity = 40;</code>
   */
  public long getEquity() {
    return equity_;
  }

  public static final int MARKET_EQUITY_FIELD_NUMBER = 41;
  private long marketEquity_;
  /**
   * <pre>
   * 市值
   * </pre>
   *
   * <code>optional int64 market_equity = 41;</code>
   */
  public long getMarketEquity() {
    return marketEquity_;
  }

  public static final int AUTH_VALUE_FIELD_NUMBER = 42;
  private long authValue_;
  /**
   * <pre>
   * 授信资金
   * </pre>
   *
   * <code>optional int64 auth_value = 42;</code>
   */
  public long getAuthValue() {
    return authValue_;
  }

  public static final int EXCHANGE_RATE_FIELD_NUMBER = 43;
  private long exchangeRate_;
  /**
   * <pre>
   *汇率
   * </pre>
   *
   * <code>optional int64 exchange_rate = 43;</code>
   */
  public long getExchangeRate() {
    return exchangeRate_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getAccountBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, account_);
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
    }
    if (precision_ != 0) {
      output.writeUInt32(3, precision_);
    }
    if (currency_ != com.demo.model.proto.trade.common.CurrencyType.CurrencyNA.getNumber()) {
      output.writeEnum(4, currency_);
    }
    if (preBalance_ != 0L) {
      output.writeInt64(5, preBalance_);
    }
    if (preUnexpProfit_ != 0L) {
      output.writeInt64(6, preUnexpProfit_);
    }
    if (preLmePositionProfit_ != 0L) {
      output.writeInt64(7, preLmePositionProfit_);
    }
    if (preEquity_ != 0L) {
      output.writeInt64(8, preEquity_);
    }
    if (preAvailable_ != 0L) {
      output.writeInt64(9, preAvailable_);
    }
    if (preMaketEquity_ != 0L) {
      output.writeInt64(10, preMaketEquity_);
    }
    if (available_ != 0L) {
      output.writeInt64(11, available_);
    }
    if (withDraw_ != 0L) {
      output.writeInt64(12, withDraw_);
    }
    if (adjustValue_ != 0L) {
      output.writeInt64(13, adjustValue_);
    }
    if (pledged_ != 0L) {
      output.writeInt64(14, pledged_);
    }
    if (commission_ != 0L) {
      output.writeInt64(15, commission_);
    }
    if (fee_ != 0L) {
      output.writeInt64(16, fee_);
    }
    if (accountFee_ != 0L) {
      output.writeInt64(17, accountFee_);
    }
    if (buyFreeze_ != 0L) {
      output.writeInt64(18, buyFreeze_);
    }
    if (buyFreezeMargin_ != 0L) {
      output.writeInt64(19, buyFreezeMargin_);
    }
    if (freezeFee_ != 0L) {
      output.writeInt64(20, freezeFee_);
    }
    if (sellFreeze_ != 0L) {
      output.writeInt64(21, sellFreeze_);
    }
    if (sellFreezeMargin_ != 0L) {
      output.writeInt64(22, sellFreezeMargin_);
    }
    if (closeProfit_ != 0L) {
      output.writeInt64(23, closeProfit_);
    }
    if (unexpProfit_ != 0L) {
      output.writeInt64(24, unexpProfit_);
    }
    if (expProfit_ != 0L) {
      output.writeInt64(25, expProfit_);
    }
    if (positionProfit_ != 0L) {
      output.writeInt64(26, positionProfit_);
    }
    if (lmePositionProfit_ != 0L) {
      output.writeInt64(27, lmePositionProfit_);
    }
    if (initialMargin_ != 0L) {
      output.writeInt64(28, initialMargin_);
    }
    if (maintenanceMargin_ != 0L) {
      output.writeInt64(29, maintenanceMargin_);
    }
    if (upperInitalMargin_ != 0L) {
      output.writeInt64(30, upperInitalMargin_);
    }
    if (upperMaintenanceMargin_ != 0L) {
      output.writeInt64(31, upperMaintenanceMargin_);
    }
    if (discount_ != 0L) {
      output.writeInt64(32, discount_);
    }
    if (deposit_ != 0L) {
      output.writeInt64(33, deposit_);
    }
    if (drawing_ != 0L) {
      output.writeInt64(34, drawing_);
    }
    if (swapInValue_ != 0L) {
      output.writeInt64(35, swapInValue_);
    }
    if (swapOutValue_ != 0L) {
      output.writeInt64(36, swapOutValue_);
    }
    if (premiumIncome_ != 0L) {
      output.writeInt64(37, premiumIncome_);
    }
    if (premiumPay_ != 0L) {
      output.writeInt64(38, premiumPay_);
    }
    if (balance_ != 0L) {
      output.writeInt64(39, balance_);
    }
    if (equity_ != 0L) {
      output.writeInt64(40, equity_);
    }
    if (marketEquity_ != 0L) {
      output.writeInt64(41, marketEquity_);
    }
    if (authValue_ != 0L) {
      output.writeInt64(42, authValue_);
    }
    if (exchangeRate_ != 0L) {
      output.writeInt64(43, exchangeRate_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getAccountBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, account_);
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
    }
    if (precision_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, precision_);
    }
    if (currency_ != com.demo.model.proto.trade.common.CurrencyType.CurrencyNA.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, currency_);
    }
    if (preBalance_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, preBalance_);
    }
    if (preUnexpProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, preUnexpProfit_);
    }
    if (preLmePositionProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, preLmePositionProfit_);
    }
    if (preEquity_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, preEquity_);
    }
    if (preAvailable_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, preAvailable_);
    }
    if (preMaketEquity_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, preMaketEquity_);
    }
    if (available_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, available_);
    }
    if (withDraw_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(12, withDraw_);
    }
    if (adjustValue_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(13, adjustValue_);
    }
    if (pledged_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(14, pledged_);
    }
    if (commission_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(15, commission_);
    }
    if (fee_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(16, fee_);
    }
    if (accountFee_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(17, accountFee_);
    }
    if (buyFreeze_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(18, buyFreeze_);
    }
    if (buyFreezeMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(19, buyFreezeMargin_);
    }
    if (freezeFee_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(20, freezeFee_);
    }
    if (sellFreeze_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(21, sellFreeze_);
    }
    if (sellFreezeMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(22, sellFreezeMargin_);
    }
    if (closeProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(23, closeProfit_);
    }
    if (unexpProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(24, unexpProfit_);
    }
    if (expProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(25, expProfit_);
    }
    if (positionProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(26, positionProfit_);
    }
    if (lmePositionProfit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(27, lmePositionProfit_);
    }
    if (initialMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(28, initialMargin_);
    }
    if (maintenanceMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(29, maintenanceMargin_);
    }
    if (upperInitalMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(30, upperInitalMargin_);
    }
    if (upperMaintenanceMargin_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(31, upperMaintenanceMargin_);
    }
    if (discount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(32, discount_);
    }
    if (deposit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(33, deposit_);
    }
    if (drawing_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(34, drawing_);
    }
    if (swapInValue_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(35, swapInValue_);
    }
    if (swapOutValue_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(36, swapOutValue_);
    }
    if (premiumIncome_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(37, premiumIncome_);
    }
    if (premiumPay_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(38, premiumPay_);
    }
    if (balance_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(39, balance_);
    }
    if (equity_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(40, equity_);
    }
    if (marketEquity_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(41, marketEquity_);
    }
    if (authValue_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(42, authValue_);
    }
    if (exchangeRate_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(43, exchangeRate_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof FutureBalance)) {
      return super.equals(obj);
    }
    FutureBalance other = (FutureBalance) obj;

    boolean result = true;
    result = result && getAccount()
        .equals(other.getAccount());
    result = result && getName()
        .equals(other.getName());
    result = result && (getPrecision()
        == other.getPrecision());
    result = result && currency_ == other.currency_;
    result = result && (getPreBalance()
        == other.getPreBalance());
    result = result && (getPreUnexpProfit()
        == other.getPreUnexpProfit());
    result = result && (getPreLmePositionProfit()
        == other.getPreLmePositionProfit());
    result = result && (getPreEquity()
        == other.getPreEquity());
    result = result && (getPreAvailable()
        == other.getPreAvailable());
    result = result && (getPreMaketEquity()
        == other.getPreMaketEquity());
    result = result && (getAvailable()
        == other.getAvailable());
    result = result && (getWithDraw()
        == other.getWithDraw());
    result = result && (getAdjustValue()
        == other.getAdjustValue());
    result = result && (getPledged()
        == other.getPledged());
    result = result && (getCommission()
        == other.getCommission());
    result = result && (getFee()
        == other.getFee());
    result = result && (getAccountFee()
        == other.getAccountFee());
    result = result && (getBuyFreeze()
        == other.getBuyFreeze());
    result = result && (getBuyFreezeMargin()
        == other.getBuyFreezeMargin());
    result = result && (getFreezeFee()
        == other.getFreezeFee());
    result = result && (getSellFreeze()
        == other.getSellFreeze());
    result = result && (getSellFreezeMargin()
        == other.getSellFreezeMargin());
    result = result && (getCloseProfit()
        == other.getCloseProfit());
    result = result && (getUnexpProfit()
        == other.getUnexpProfit());
    result = result && (getExpProfit()
        == other.getExpProfit());
    result = result && (getPositionProfit()
        == other.getPositionProfit());
    result = result && (getLmePositionProfit()
        == other.getLmePositionProfit());
    result = result && (getInitialMargin()
        == other.getInitialMargin());
    result = result && (getMaintenanceMargin()
        == other.getMaintenanceMargin());
    result = result && (getUpperInitalMargin()
        == other.getUpperInitalMargin());
    result = result && (getUpperMaintenanceMargin()
        == other.getUpperMaintenanceMargin());
    result = result && (getDiscount()
        == other.getDiscount());
    result = result && (getDeposit()
        == other.getDeposit());
    result = result && (getDrawing()
        == other.getDrawing());
    result = result && (getSwapInValue()
        == other.getSwapInValue());
    result = result && (getSwapOutValue()
        == other.getSwapOutValue());
    result = result && (getPremiumIncome()
        == other.getPremiumIncome());
    result = result && (getPremiumPay()
        == other.getPremiumPay());
    result = result && (getBalance()
        == other.getBalance());
    result = result && (getEquity()
        == other.getEquity());
    result = result && (getMarketEquity()
        == other.getMarketEquity());
    result = result && (getAuthValue()
        == other.getAuthValue());
    result = result && (getExchangeRate()
        == other.getExchangeRate());
    return result;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + ACCOUNT_FIELD_NUMBER;
    hash = (53 * hash) + getAccount().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + PRECISION_FIELD_NUMBER;
    hash = (53 * hash) + getPrecision();
    hash = (37 * hash) + CURRENCY_FIELD_NUMBER;
    hash = (53 * hash) + currency_;
    hash = (37 * hash) + PRE_BALANCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreBalance());
    hash = (37 * hash) + PRE_UNEXP_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreUnexpProfit());
    hash = (37 * hash) + PRE_LME_POSITION_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreLmePositionProfit());
    hash = (37 * hash) + PRE_EQUITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreEquity());
    hash = (37 * hash) + PRE_AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreAvailable());
    hash = (37 * hash) + PRE_MAKET_EQUITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPreMaketEquity());
    hash = (37 * hash) + AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAvailable());
    hash = (37 * hash) + WITH_DRAW_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getWithDraw());
    hash = (37 * hash) + ADJUST_VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAdjustValue());
    hash = (37 * hash) + PLEDGED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPledged());
    hash = (37 * hash) + COMMISSION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCommission());
    hash = (37 * hash) + FEE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getFee());
    hash = (37 * hash) + ACCOUNT_FEE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAccountFee());
    hash = (37 * hash) + BUY_FREEZE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getBuyFreeze());
    hash = (37 * hash) + BUY_FREEZE_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getBuyFreezeMargin());
    hash = (37 * hash) + FREEZE_FEE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getFreezeFee());
    hash = (37 * hash) + SELL_FREEZE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSellFreeze());
    hash = (37 * hash) + SELL_FREEZE_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSellFreezeMargin());
    hash = (37 * hash) + CLOSE_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCloseProfit());
    hash = (37 * hash) + UNEXP_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUnexpProfit());
    hash = (37 * hash) + EXP_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getExpProfit());
    hash = (37 * hash) + POSITION_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPositionProfit());
    hash = (37 * hash) + LME_POSITION_PROFIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLmePositionProfit());
    hash = (37 * hash) + INITIAL_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getInitialMargin());
    hash = (37 * hash) + MAINTENANCE_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMaintenanceMargin());
    hash = (37 * hash) + UPPER_INITAL_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUpperInitalMargin());
    hash = (37 * hash) + UPPER_MAINTENANCE_MARGIN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUpperMaintenanceMargin());
    hash = (37 * hash) + DISCOUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getDiscount());
    hash = (37 * hash) + DEPOSIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getDeposit());
    hash = (37 * hash) + DRAWING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getDrawing());
    hash = (37 * hash) + SWAP_IN_VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSwapInValue());
    hash = (37 * hash) + SWAP_OUT_VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSwapOutValue());
    hash = (37 * hash) + PREMIUM_INCOME_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPremiumIncome());
    hash = (37 * hash) + PREMIUM_PAY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPremiumPay());
    hash = (37 * hash) + BALANCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getBalance());
    hash = (37 * hash) + EQUITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getEquity());
    hash = (37 * hash) + MARKET_EQUITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMarketEquity());
    hash = (37 * hash) + AUTH_VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAuthValue());
    hash = (37 * hash) + EXCHANGE_RATE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getExchangeRate());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static FutureBalance parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FutureBalance parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FutureBalance parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FutureBalance parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FutureBalance parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FutureBalance parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static FutureBalance parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static FutureBalance parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static FutureBalance parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FutureBalance parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(FutureBalance prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.demo.model.proto.gateway.FutureBalance}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.demo.model.proto.gateway.FutureBalance)
      FutureBalanceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TradeMsgDef.internal_static_com_demo_model_proto_gateway_FutureBalance_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TradeMsgDef.internal_static_com_demo_model_proto_gateway_FutureBalance_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FutureBalance.class, Builder.class);
    }

    // Construct using com.demo.model.proto.gateway.FutureBalance.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      account_ = "";

      name_ = "";

      precision_ = 0;

      currency_ = 0;

      preBalance_ = 0L;

      preUnexpProfit_ = 0L;

      preLmePositionProfit_ = 0L;

      preEquity_ = 0L;

      preAvailable_ = 0L;

      preMaketEquity_ = 0L;

      available_ = 0L;

      withDraw_ = 0L;

      adjustValue_ = 0L;

      pledged_ = 0L;

      commission_ = 0L;

      fee_ = 0L;

      accountFee_ = 0L;

      buyFreeze_ = 0L;

      buyFreezeMargin_ = 0L;

      freezeFee_ = 0L;

      sellFreeze_ = 0L;

      sellFreezeMargin_ = 0L;

      closeProfit_ = 0L;

      unexpProfit_ = 0L;

      expProfit_ = 0L;

      positionProfit_ = 0L;

      lmePositionProfit_ = 0L;

      initialMargin_ = 0L;

      maintenanceMargin_ = 0L;

      upperInitalMargin_ = 0L;

      upperMaintenanceMargin_ = 0L;

      discount_ = 0L;

      deposit_ = 0L;

      drawing_ = 0L;

      swapInValue_ = 0L;

      swapOutValue_ = 0L;

      premiumIncome_ = 0L;

      premiumPay_ = 0L;

      balance_ = 0L;

      equity_ = 0L;

      marketEquity_ = 0L;

      authValue_ = 0L;

      exchangeRate_ = 0L;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return TradeMsgDef.internal_static_com_demo_model_proto_gateway_FutureBalance_descriptor;
    }

    public FutureBalance getDefaultInstanceForType() {
      return FutureBalance.getDefaultInstance();
    }

    public FutureBalance build() {
      FutureBalance result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public FutureBalance buildPartial() {
      FutureBalance result = new FutureBalance(this);
      result.account_ = account_;
      result.name_ = name_;
      result.precision_ = precision_;
      result.currency_ = currency_;
      result.preBalance_ = preBalance_;
      result.preUnexpProfit_ = preUnexpProfit_;
      result.preLmePositionProfit_ = preLmePositionProfit_;
      result.preEquity_ = preEquity_;
      result.preAvailable_ = preAvailable_;
      result.preMaketEquity_ = preMaketEquity_;
      result.available_ = available_;
      result.withDraw_ = withDraw_;
      result.adjustValue_ = adjustValue_;
      result.pledged_ = pledged_;
      result.commission_ = commission_;
      result.fee_ = fee_;
      result.accountFee_ = accountFee_;
      result.buyFreeze_ = buyFreeze_;
      result.buyFreezeMargin_ = buyFreezeMargin_;
      result.freezeFee_ = freezeFee_;
      result.sellFreeze_ = sellFreeze_;
      result.sellFreezeMargin_ = sellFreezeMargin_;
      result.closeProfit_ = closeProfit_;
      result.unexpProfit_ = unexpProfit_;
      result.expProfit_ = expProfit_;
      result.positionProfit_ = positionProfit_;
      result.lmePositionProfit_ = lmePositionProfit_;
      result.initialMargin_ = initialMargin_;
      result.maintenanceMargin_ = maintenanceMargin_;
      result.upperInitalMargin_ = upperInitalMargin_;
      result.upperMaintenanceMargin_ = upperMaintenanceMargin_;
      result.discount_ = discount_;
      result.deposit_ = deposit_;
      result.drawing_ = drawing_;
      result.swapInValue_ = swapInValue_;
      result.swapOutValue_ = swapOutValue_;
      result.premiumIncome_ = premiumIncome_;
      result.premiumPay_ = premiumPay_;
      result.balance_ = balance_;
      result.equity_ = equity_;
      result.marketEquity_ = marketEquity_;
      result.authValue_ = authValue_;
      result.exchangeRate_ = exchangeRate_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof FutureBalance) {
        return mergeFrom((FutureBalance)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(FutureBalance other) {
      if (other == FutureBalance.getDefaultInstance()) return this;
      if (!other.getAccount().isEmpty()) {
        account_ = other.account_;
        onChanged();
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.getPrecision() != 0) {
        setPrecision(other.getPrecision());
      }
      if (other.currency_ != 0) {
        setCurrencyValue(other.getCurrencyValue());
      }
      if (other.getPreBalance() != 0L) {
        setPreBalance(other.getPreBalance());
      }
      if (other.getPreUnexpProfit() != 0L) {
        setPreUnexpProfit(other.getPreUnexpProfit());
      }
      if (other.getPreLmePositionProfit() != 0L) {
        setPreLmePositionProfit(other.getPreLmePositionProfit());
      }
      if (other.getPreEquity() != 0L) {
        setPreEquity(other.getPreEquity());
      }
      if (other.getPreAvailable() != 0L) {
        setPreAvailable(other.getPreAvailable());
      }
      if (other.getPreMaketEquity() != 0L) {
        setPreMaketEquity(other.getPreMaketEquity());
      }
      if (other.getAvailable() != 0L) {
        setAvailable(other.getAvailable());
      }
      if (other.getWithDraw() != 0L) {
        setWithDraw(other.getWithDraw());
      }
      if (other.getAdjustValue() != 0L) {
        setAdjustValue(other.getAdjustValue());
      }
      if (other.getPledged() != 0L) {
        setPledged(other.getPledged());
      }
      if (other.getCommission() != 0L) {
        setCommission(other.getCommission());
      }
      if (other.getFee() != 0L) {
        setFee(other.getFee());
      }
      if (other.getAccountFee() != 0L) {
        setAccountFee(other.getAccountFee());
      }
      if (other.getBuyFreeze() != 0L) {
        setBuyFreeze(other.getBuyFreeze());
      }
      if (other.getBuyFreezeMargin() != 0L) {
        setBuyFreezeMargin(other.getBuyFreezeMargin());
      }
      if (other.getFreezeFee() != 0L) {
        setFreezeFee(other.getFreezeFee());
      }
      if (other.getSellFreeze() != 0L) {
        setSellFreeze(other.getSellFreeze());
      }
      if (other.getSellFreezeMargin() != 0L) {
        setSellFreezeMargin(other.getSellFreezeMargin());
      }
      if (other.getCloseProfit() != 0L) {
        setCloseProfit(other.getCloseProfit());
      }
      if (other.getUnexpProfit() != 0L) {
        setUnexpProfit(other.getUnexpProfit());
      }
      if (other.getExpProfit() != 0L) {
        setExpProfit(other.getExpProfit());
      }
      if (other.getPositionProfit() != 0L) {
        setPositionProfit(other.getPositionProfit());
      }
      if (other.getLmePositionProfit() != 0L) {
        setLmePositionProfit(other.getLmePositionProfit());
      }
      if (other.getInitialMargin() != 0L) {
        setInitialMargin(other.getInitialMargin());
      }
      if (other.getMaintenanceMargin() != 0L) {
        setMaintenanceMargin(other.getMaintenanceMargin());
      }
      if (other.getUpperInitalMargin() != 0L) {
        setUpperInitalMargin(other.getUpperInitalMargin());
      }
      if (other.getUpperMaintenanceMargin() != 0L) {
        setUpperMaintenanceMargin(other.getUpperMaintenanceMargin());
      }
      if (other.getDiscount() != 0L) {
        setDiscount(other.getDiscount());
      }
      if (other.getDeposit() != 0L) {
        setDeposit(other.getDeposit());
      }
      if (other.getDrawing() != 0L) {
        setDrawing(other.getDrawing());
      }
      if (other.getSwapInValue() != 0L) {
        setSwapInValue(other.getSwapInValue());
      }
      if (other.getSwapOutValue() != 0L) {
        setSwapOutValue(other.getSwapOutValue());
      }
      if (other.getPremiumIncome() != 0L) {
        setPremiumIncome(other.getPremiumIncome());
      }
      if (other.getPremiumPay() != 0L) {
        setPremiumPay(other.getPremiumPay());
      }
      if (other.getBalance() != 0L) {
        setBalance(other.getBalance());
      }
      if (other.getEquity() != 0L) {
        setEquity(other.getEquity());
      }
      if (other.getMarketEquity() != 0L) {
        setMarketEquity(other.getMarketEquity());
      }
      if (other.getAuthValue() != 0L) {
        setAuthValue(other.getAuthValue());
      }
      if (other.getExchangeRate() != 0L) {
        setExchangeRate(other.getExchangeRate());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      FutureBalance parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (FutureBalance) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private Object account_ = "";
    /**
     * <pre>
     * 投资者账户
     * </pre>
     *
     * <code>optional string account = 1;</code>
     */
    public String getAccount() {
      Object ref = account_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        account_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * 投资者账户
     * </pre>
     *
     * <code>optional string account = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAccountBytes() {
      Object ref = account_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        account_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 投资者账户
     * </pre>
     *
     * <code>optional string account = 1;</code>
     */
    public Builder setAccount(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      account_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 投资者账户
     * </pre>
     *
     * <code>optional string account = 1;</code>
     */
    public Builder clearAccount() {
      
      account_ = getDefaultInstance().getAccount();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 投资者账户
     * </pre>
     *
     * <code>optional string account = 1;</code>
     */
    public Builder setAccountBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      account_ = value;
      onChanged();
      return this;
    }

    private Object name_ = "";
    /**
     * <pre>
     * 投资者名称
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public String getName() {
      Object ref = name_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * 投资者名称
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 投资者名称
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public Builder setName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 投资者名称
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 投资者名称
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private int precision_ ;
    /**
     * <pre>
     * 精度
     * </pre>
     *
     * <code>optional uint32 precision = 3;</code>
     */
    public int getPrecision() {
      return precision_;
    }
    /**
     * <pre>
     * 精度
     * </pre>
     *
     * <code>optional uint32 precision = 3;</code>
     */
    public Builder setPrecision(int value) {
      
      precision_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 精度
     * </pre>
     *
     * <code>optional uint32 precision = 3;</code>
     */
    public Builder clearPrecision() {
      
      precision_ = 0;
      onChanged();
      return this;
    }

    private int currency_ = 0;
    /**
     * <pre>
     * 币种
     * </pre>
     *
     * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
     */
    public int getCurrencyValue() {
      return currency_;
    }
    /**
     * <pre>
     * 币种
     * </pre>
     *
     * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
     */
    public Builder setCurrencyValue(int value) {
      currency_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 币种
     * </pre>
     *
     * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
     */
    public com.demo.model.proto.trade.common.CurrencyType getCurrency() {
      com.demo.model.proto.trade.common.CurrencyType result = com.demo.model.proto.trade.common.CurrencyType.valueOf(currency_);
      return result == null ? com.demo.model.proto.trade.common.CurrencyType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * 币种
     * </pre>
     *
     * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
     */
    public Builder setCurrency(com.demo.model.proto.trade.common.CurrencyType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      currency_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 币种
     * </pre>
     *
     * <code>optional .com.demo.model.proto.trade.common.CurrencyType currency = 4;</code>
     */
    public Builder clearCurrency() {
      
      currency_ = 0;
      onChanged();
      return this;
    }

    private long preBalance_ ;
    /**
     * <pre>
     * 昨结
     * </pre>
     *
     * <code>optional int64 pre_balance = 5;</code>
     */
    public long getPreBalance() {
      return preBalance_;
    }
    /**
     * <pre>
     * 昨结
     * </pre>
     *
     * <code>optional int64 pre_balance = 5;</code>
     */
    public Builder setPreBalance(long value) {
      
      preBalance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 昨结
     * </pre>
     *
     * <code>optional int64 pre_balance = 5;</code>
     */
    public Builder clearPreBalance() {
      
      preBalance_ = 0L;
      onChanged();
      return this;
    }

    private long preUnexpProfit_ ;
    /**
     * <pre>
     * 上日未到期平盈
     * </pre>
     *
     * <code>optional int64 pre_unexp_profit = 6;</code>
     */
    public long getPreUnexpProfit() {
      return preUnexpProfit_;
    }
    /**
     * <pre>
     * 上日未到期平盈
     * </pre>
     *
     * <code>optional int64 pre_unexp_profit = 6;</code>
     */
    public Builder setPreUnexpProfit(long value) {
      
      preUnexpProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上日未到期平盈
     * </pre>
     *
     * <code>optional int64 pre_unexp_profit = 6;</code>
     */
    public Builder clearPreUnexpProfit() {
      
      preUnexpProfit_ = 0L;
      onChanged();
      return this;
    }

    private long preLmePositionProfit_ ;
    /**
     * <pre>
     * 上日LME持仓平盈
     * </pre>
     *
     * <code>optional int64 pre_lme_position_profit = 7;</code>
     */
    public long getPreLmePositionProfit() {
      return preLmePositionProfit_;
    }
    /**
     * <pre>
     * 上日LME持仓平盈
     * </pre>
     *
     * <code>optional int64 pre_lme_position_profit = 7;</code>
     */
    public Builder setPreLmePositionProfit(long value) {
      
      preLmePositionProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上日LME持仓平盈
     * </pre>
     *
     * <code>optional int64 pre_lme_position_profit = 7;</code>
     */
    public Builder clearPreLmePositionProfit() {
      
      preLmePositionProfit_ = 0L;
      onChanged();
      return this;
    }

    private long preEquity_ ;
    /**
     * <pre>
     * 上日权益
     * </pre>
     *
     * <code>optional int64 pre_equity = 8;</code>
     */
    public long getPreEquity() {
      return preEquity_;
    }
    /**
     * <pre>
     * 上日权益
     * </pre>
     *
     * <code>optional int64 pre_equity = 8;</code>
     */
    public Builder setPreEquity(long value) {
      
      preEquity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上日权益
     * </pre>
     *
     * <code>optional int64 pre_equity = 8;</code>
     */
    public Builder clearPreEquity() {
      
      preEquity_ = 0L;
      onChanged();
      return this;
    }

    private long preAvailable_ ;
    /**
     * <pre>
     * 昨可用
     * </pre>
     *
     * <code>optional int64 pre_available = 9;</code>
     */
    public long getPreAvailable() {
      return preAvailable_;
    }
    /**
     * <pre>
     * 昨可用
     * </pre>
     *
     * <code>optional int64 pre_available = 9;</code>
     */
    public Builder setPreAvailable(long value) {
      
      preAvailable_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 昨可用
     * </pre>
     *
     * <code>optional int64 pre_available = 9;</code>
     */
    public Builder clearPreAvailable() {
      
      preAvailable_ = 0L;
      onChanged();
      return this;
    }

    private long preMaketEquity_ ;
    /**
     * <pre>
     * 上日市值权益(动态盈亏)
     * </pre>
     *
     * <code>optional int64 pre_maket_equity = 10;</code>
     */
    public long getPreMaketEquity() {
      return preMaketEquity_;
    }
    /**
     * <pre>
     * 上日市值权益(动态盈亏)
     * </pre>
     *
     * <code>optional int64 pre_maket_equity = 10;</code>
     */
    public Builder setPreMaketEquity(long value) {
      
      preMaketEquity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上日市值权益(动态盈亏)
     * </pre>
     *
     * <code>optional int64 pre_maket_equity = 10;</code>
     */
    public Builder clearPreMaketEquity() {
      
      preMaketEquity_ = 0L;
      onChanged();
      return this;
    }

    private long available_ ;
    /**
     * <pre>
     * 可用
     * </pre>
     *
     * <code>optional int64 available = 11;</code>
     */
    public long getAvailable() {
      return available_;
    }
    /**
     * <pre>
     * 可用
     * </pre>
     *
     * <code>optional int64 available = 11;</code>
     */
    public Builder setAvailable(long value) {
      
      available_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 可用
     * </pre>
     *
     * <code>optional int64 available = 11;</code>
     */
    public Builder clearAvailable() {
      
      available_ = 0L;
      onChanged();
      return this;
    }

    private long withDraw_ ;
    /**
     * <pre>
     * 可取
     * </pre>
     *
     * <code>optional int64 with_draw = 12;</code>
     */
    public long getWithDraw() {
      return withDraw_;
    }
    /**
     * <pre>
     * 可取
     * </pre>
     *
     * <code>optional int64 with_draw = 12;</code>
     */
    public Builder setWithDraw(long value) {
      
      withDraw_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 可取
     * </pre>
     *
     * <code>optional int64 with_draw = 12;</code>
     */
    public Builder clearWithDraw() {
      
      withDraw_ = 0L;
      onChanged();
      return this;
    }

    private long adjustValue_ ;
    /**
     * <pre>
     * 资金调整
     * </pre>
     *
     * <code>optional int64 adjust_value = 13;</code>
     */
    public long getAdjustValue() {
      return adjustValue_;
    }
    /**
     * <pre>
     * 资金调整
     * </pre>
     *
     * <code>optional int64 adjust_value = 13;</code>
     */
    public Builder setAdjustValue(long value) {
      
      adjustValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 资金调整
     * </pre>
     *
     * <code>optional int64 adjust_value = 13;</code>
     */
    public Builder clearAdjustValue() {
      
      adjustValue_ = 0L;
      onChanged();
      return this;
    }

    private long pledged_ ;
    /**
     * <pre>
     * 质押资金
     * </pre>
     *
     * <code>optional int64 pledged = 14;</code>
     */
    public long getPledged() {
      return pledged_;
    }
    /**
     * <pre>
     * 质押资金
     * </pre>
     *
     * <code>optional int64 pledged = 14;</code>
     */
    public Builder setPledged(long value) {
      
      pledged_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 质押资金
     * </pre>
     *
     * <code>optional int64 pledged = 14;</code>
     */
    public Builder clearPledged() {
      
      pledged_ = 0L;
      onChanged();
      return this;
    }

    private long commission_ ;
    /**
     * <pre>
     * 手续费
     * </pre>
     *
     * <code>optional int64 commission = 15;</code>
     */
    public long getCommission() {
      return commission_;
    }
    /**
     * <pre>
     * 手续费
     * </pre>
     *
     * <code>optional int64 commission = 15;</code>
     */
    public Builder setCommission(long value) {
      
      commission_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 手续费
     * </pre>
     *
     * <code>optional int64 commission = 15;</code>
     */
    public Builder clearCommission() {
      
      commission_ = 0L;
      onChanged();
      return this;
    }

    private long fee_ ;
    /**
     * <pre>
     * 交易费
     * </pre>
     *
     * <code>optional int64 fee = 16;</code>
     */
    public long getFee() {
      return fee_;
    }
    /**
     * <pre>
     * 交易费
     * </pre>
     *
     * <code>optional int64 fee = 16;</code>
     */
    public Builder setFee(long value) {
      
      fee_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 交易费
     * </pre>
     *
     * <code>optional int64 fee = 16;</code>
     */
    public Builder clearFee() {
      
      fee_ = 0L;
      onChanged();
      return this;
    }

    private long accountFee_ ;
    /**
     * <pre>
     * 客户手续费
     * </pre>
     *
     * <code>optional int64 account_fee = 17;</code>
     */
    public long getAccountFee() {
      return accountFee_;
    }
    /**
     * <pre>
     * 客户手续费
     * </pre>
     *
     * <code>optional int64 account_fee = 17;</code>
     */
    public Builder setAccountFee(long value) {
      
      accountFee_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 客户手续费
     * </pre>
     *
     * <code>optional int64 account_fee = 17;</code>
     */
    public Builder clearAccountFee() {
      
      accountFee_ = 0L;
      onChanged();
      return this;
    }

    private long buyFreeze_ ;
    /**
     * <pre>
     * 买入冻结
     * </pre>
     *
     * <code>optional int64 buy_freeze = 18;</code>
     */
    public long getBuyFreeze() {
      return buyFreeze_;
    }
    /**
     * <pre>
     * 买入冻结
     * </pre>
     *
     * <code>optional int64 buy_freeze = 18;</code>
     */
    public Builder setBuyFreeze(long value) {
      
      buyFreeze_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 买入冻结
     * </pre>
     *
     * <code>optional int64 buy_freeze = 18;</code>
     */
    public Builder clearBuyFreeze() {
      
      buyFreeze_ = 0L;
      onChanged();
      return this;
    }

    private long buyFreezeMargin_ ;
    /**
     * <pre>
     * 冻结保证金
     * </pre>
     *
     * <code>optional int64 buy_freeze_margin = 19;</code>
     */
    public long getBuyFreezeMargin() {
      return buyFreezeMargin_;
    }
    /**
     * <pre>
     * 冻结保证金
     * </pre>
     *
     * <code>optional int64 buy_freeze_margin = 19;</code>
     */
    public Builder setBuyFreezeMargin(long value) {
      
      buyFreezeMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 冻结保证金
     * </pre>
     *
     * <code>optional int64 buy_freeze_margin = 19;</code>
     */
    public Builder clearBuyFreezeMargin() {
      
      buyFreezeMargin_ = 0L;
      onChanged();
      return this;
    }

    private long freezeFee_ ;
    /**
     * <pre>
     * 冻结费用
     * </pre>
     *
     * <code>optional int64 freeze_fee = 20;</code>
     */
    public long getFreezeFee() {
      return freezeFee_;
    }
    /**
     * <pre>
     * 冻结费用
     * </pre>
     *
     * <code>optional int64 freeze_fee = 20;</code>
     */
    public Builder setFreezeFee(long value) {
      
      freezeFee_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 冻结费用
     * </pre>
     *
     * <code>optional int64 freeze_fee = 20;</code>
     */
    public Builder clearFreezeFee() {
      
      freezeFee_ = 0L;
      onChanged();
      return this;
    }

    private long sellFreeze_ ;
    /**
     * <pre>
     * 卖出冻结
     * </pre>
     *
     * <code>optional int64 sell_freeze = 21;</code>
     */
    public long getSellFreeze() {
      return sellFreeze_;
    }
    /**
     * <pre>
     * 卖出冻结
     * </pre>
     *
     * <code>optional int64 sell_freeze = 21;</code>
     */
    public Builder setSellFreeze(long value) {
      
      sellFreeze_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 卖出冻结
     * </pre>
     *
     * <code>optional int64 sell_freeze = 21;</code>
     */
    public Builder clearSellFreeze() {
      
      sellFreeze_ = 0L;
      onChanged();
      return this;
    }

    private long sellFreezeMargin_ ;
    /**
     * <pre>
     * 卖出冻结保证金
     * </pre>
     *
     * <code>optional int64 sell_freeze_margin = 22;</code>
     */
    public long getSellFreezeMargin() {
      return sellFreezeMargin_;
    }
    /**
     * <pre>
     * 卖出冻结保证金
     * </pre>
     *
     * <code>optional int64 sell_freeze_margin = 22;</code>
     */
    public Builder setSellFreezeMargin(long value) {
      
      sellFreezeMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 卖出冻结保证金
     * </pre>
     *
     * <code>optional int64 sell_freeze_margin = 22;</code>
     */
    public Builder clearSellFreezeMargin() {
      
      sellFreezeMargin_ = 0L;
      onChanged();
      return this;
    }

    private long closeProfit_ ;
    /**
     * <pre>
     * 平仓盈亏
     * </pre>
     *
     * <code>optional int64 close_profit = 23;</code>
     */
    public long getCloseProfit() {
      return closeProfit_;
    }
    /**
     * <pre>
     * 平仓盈亏
     * </pre>
     *
     * <code>optional int64 close_profit = 23;</code>
     */
    public Builder setCloseProfit(long value) {
      
      closeProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 平仓盈亏
     * </pre>
     *
     * <code>optional int64 close_profit = 23;</code>
     */
    public Builder clearCloseProfit() {
      
      closeProfit_ = 0L;
      onChanged();
      return this;
    }

    private long unexpProfit_ ;
    /**
     * <pre>
     * 未到期平盈
     * </pre>
     *
     * <code>optional int64 unexp_profit = 24;</code>
     */
    public long getUnexpProfit() {
      return unexpProfit_;
    }
    /**
     * <pre>
     * 未到期平盈
     * </pre>
     *
     * <code>optional int64 unexp_profit = 24;</code>
     */
    public Builder setUnexpProfit(long value) {
      
      unexpProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 未到期平盈
     * </pre>
     *
     * <code>optional int64 unexp_profit = 24;</code>
     */
    public Builder clearUnexpProfit() {
      
      unexpProfit_ = 0L;
      onChanged();
      return this;
    }

    private long expProfit_ ;
    /**
     * <pre>
     * 到期平仓盈亏
     * </pre>
     *
     * <code>optional int64 exp_profit = 25;</code>
     */
    public long getExpProfit() {
      return expProfit_;
    }
    /**
     * <pre>
     * 到期平仓盈亏
     * </pre>
     *
     * <code>optional int64 exp_profit = 25;</code>
     */
    public Builder setExpProfit(long value) {
      
      expProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 到期平仓盈亏
     * </pre>
     *
     * <code>optional int64 exp_profit = 25;</code>
     */
    public Builder clearExpProfit() {
      
      expProfit_ = 0L;
      onChanged();
      return this;
    }

    private long positionProfit_ ;
    /**
     * <pre>
     * 不含LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 position_profit = 26;</code>
     */
    public long getPositionProfit() {
      return positionProfit_;
    }
    /**
     * <pre>
     * 不含LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 position_profit = 26;</code>
     */
    public Builder setPositionProfit(long value) {
      
      positionProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 不含LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 position_profit = 26;</code>
     */
    public Builder clearPositionProfit() {
      
      positionProfit_ = 0L;
      onChanged();
      return this;
    }

    private long lmePositionProfit_ ;
    /**
     * <pre>
     * LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 lme_position_profit = 27;</code>
     */
    public long getLmePositionProfit() {
      return lmePositionProfit_;
    }
    /**
     * <pre>
     * LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 lme_position_profit = 27;</code>
     */
    public Builder setLmePositionProfit(long value) {
      
      lmePositionProfit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LME持仓盈亏
     * </pre>
     *
     * <code>optional int64 lme_position_profit = 27;</code>
     */
    public Builder clearLmePositionProfit() {
      
      lmePositionProfit_ = 0L;
      onChanged();
      return this;
    }

    private long initialMargin_ ;
    /**
     * <pre>
     * 初始保证金
     * </pre>
     *
     * <code>optional int64 initial_margin = 28;</code>
     */
    public long getInitialMargin() {
      return initialMargin_;
    }
    /**
     * <pre>
     * 初始保证金
     * </pre>
     *
     * <code>optional int64 initial_margin = 28;</code>
     */
    public Builder setInitialMargin(long value) {
      
      initialMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 初始保证金
     * </pre>
     *
     * <code>optional int64 initial_margin = 28;</code>
     */
    public Builder clearInitialMargin() {
      
      initialMargin_ = 0L;
      onChanged();
      return this;
    }

    private long maintenanceMargin_ ;
    /**
     * <pre>
     * 维持保证金
     * </pre>
     *
     * <code>optional int64 maintenance_margin = 29;</code>
     */
    public long getMaintenanceMargin() {
      return maintenanceMargin_;
    }
    /**
     * <pre>
     * 维持保证金
     * </pre>
     *
     * <code>optional int64 maintenance_margin = 29;</code>
     */
    public Builder setMaintenanceMargin(long value) {
      
      maintenanceMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 维持保证金
     * </pre>
     *
     * <code>optional int64 maintenance_margin = 29;</code>
     */
    public Builder clearMaintenanceMargin() {
      
      maintenanceMargin_ = 0L;
      onChanged();
      return this;
    }

    private long upperInitalMargin_ ;
    /**
     * <pre>
     * 上手初始保证金
     * </pre>
     *
     * <code>optional int64 upper_inital_margin = 30;</code>
     */
    public long getUpperInitalMargin() {
      return upperInitalMargin_;
    }
    /**
     * <pre>
     * 上手初始保证金
     * </pre>
     *
     * <code>optional int64 upper_inital_margin = 30;</code>
     */
    public Builder setUpperInitalMargin(long value) {
      
      upperInitalMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上手初始保证金
     * </pre>
     *
     * <code>optional int64 upper_inital_margin = 30;</code>
     */
    public Builder clearUpperInitalMargin() {
      
      upperInitalMargin_ = 0L;
      onChanged();
      return this;
    }

    private long upperMaintenanceMargin_ ;
    /**
     * <pre>
     * 上手维持保证金
     * </pre>
     *
     * <code>optional int64 upper_maintenance_margin = 31;</code>
     */
    public long getUpperMaintenanceMargin() {
      return upperMaintenanceMargin_;
    }
    /**
     * <pre>
     * 上手维持保证金
     * </pre>
     *
     * <code>optional int64 upper_maintenance_margin = 31;</code>
     */
    public Builder setUpperMaintenanceMargin(long value) {
      
      upperMaintenanceMargin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 上手维持保证金
     * </pre>
     *
     * <code>optional int64 upper_maintenance_margin = 31;</code>
     */
    public Builder clearUpperMaintenanceMargin() {
      
      upperMaintenanceMargin_ = 0L;
      onChanged();
      return this;
    }

    private long discount_ ;
    /**
     * <pre>
     * LME贴现
     * </pre>
     *
     * <code>optional int64 discount = 32;</code>
     */
    public long getDiscount() {
      return discount_;
    }
    /**
     * <pre>
     * LME贴现
     * </pre>
     *
     * <code>optional int64 discount = 32;</code>
     */
    public Builder setDiscount(long value) {
      
      discount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LME贴现
     * </pre>
     *
     * <code>optional int64 discount = 32;</code>
     */
    public Builder clearDiscount() {
      
      discount_ = 0L;
      onChanged();
      return this;
    }

    private long deposit_ ;
    /**
     * <pre>
     * 入金
     * </pre>
     *
     * <code>optional int64 deposit = 33;</code>
     */
    public long getDeposit() {
      return deposit_;
    }
    /**
     * <pre>
     * 入金
     * </pre>
     *
     * <code>optional int64 deposit = 33;</code>
     */
    public Builder setDeposit(long value) {
      
      deposit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 入金
     * </pre>
     *
     * <code>optional int64 deposit = 33;</code>
     */
    public Builder clearDeposit() {
      
      deposit_ = 0L;
      onChanged();
      return this;
    }

    private long drawing_ ;
    /**
     * <pre>
     * 出金
     * </pre>
     *
     * <code>optional int64 drawing = 34;</code>
     */
    public long getDrawing() {
      return drawing_;
    }
    /**
     * <pre>
     * 出金
     * </pre>
     *
     * <code>optional int64 drawing = 34;</code>
     */
    public Builder setDrawing(long value) {
      
      drawing_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 出金
     * </pre>
     *
     * <code>optional int64 drawing = 34;</code>
     */
    public Builder clearDrawing() {
      
      drawing_ = 0L;
      onChanged();
      return this;
    }

    private long swapInValue_ ;
    /**
     * <pre>
     * 汇入资金
     * </pre>
     *
     * <code>optional int64 swap_in_value = 35;</code>
     */
    public long getSwapInValue() {
      return swapInValue_;
    }
    /**
     * <pre>
     * 汇入资金
     * </pre>
     *
     * <code>optional int64 swap_in_value = 35;</code>
     */
    public Builder setSwapInValue(long value) {
      
      swapInValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 汇入资金
     * </pre>
     *
     * <code>optional int64 swap_in_value = 35;</code>
     */
    public Builder clearSwapInValue() {
      
      swapInValue_ = 0L;
      onChanged();
      return this;
    }

    private long swapOutValue_ ;
    /**
     * <pre>
     * 汇出资金
     * </pre>
     *
     * <code>optional int64 swap_out_value = 36;</code>
     */
    public long getSwapOutValue() {
      return swapOutValue_;
    }
    /**
     * <pre>
     * 汇出资金
     * </pre>
     *
     * <code>optional int64 swap_out_value = 36;</code>
     */
    public Builder setSwapOutValue(long value) {
      
      swapOutValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 汇出资金
     * </pre>
     *
     * <code>optional int64 swap_out_value = 36;</code>
     */
    public Builder clearSwapOutValue() {
      
      swapOutValue_ = 0L;
      onChanged();
      return this;
    }

    private long premiumIncome_ ;
    /**
     * <pre>
     * 权利金收取
     * </pre>
     *
     * <code>optional int64 premium_income = 37;</code>
     */
    public long getPremiumIncome() {
      return premiumIncome_;
    }
    /**
     * <pre>
     * 权利金收取
     * </pre>
     *
     * <code>optional int64 premium_income = 37;</code>
     */
    public Builder setPremiumIncome(long value) {
      
      premiumIncome_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 权利金收取
     * </pre>
     *
     * <code>optional int64 premium_income = 37;</code>
     */
    public Builder clearPremiumIncome() {
      
      premiumIncome_ = 0L;
      onChanged();
      return this;
    }

    private long premiumPay_ ;
    /**
     * <pre>
     * 权利金支付
     * </pre>
     *
     * <code>optional int64 premium_pay = 38;</code>
     */
    public long getPremiumPay() {
      return premiumPay_;
    }
    /**
     * <pre>
     * 权利金支付
     * </pre>
     *
     * <code>optional int64 premium_pay = 38;</code>
     */
    public Builder setPremiumPay(long value) {
      
      premiumPay_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 权利金支付
     * </pre>
     *
     * <code>optional int64 premium_pay = 38;</code>
     */
    public Builder clearPremiumPay() {
      
      premiumPay_ = 0L;
      onChanged();
      return this;
    }

    private long balance_ ;
    /**
     * <pre>
     * 结存
     * </pre>
     *
     * <code>optional int64 balance = 39;</code>
     */
    public long getBalance() {
      return balance_;
    }
    /**
     * <pre>
     * 结存
     * </pre>
     *
     * <code>optional int64 balance = 39;</code>
     */
    public Builder setBalance(long value) {
      
      balance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 结存
     * </pre>
     *
     * <code>optional int64 balance = 39;</code>
     */
    public Builder clearBalance() {
      
      balance_ = 0L;
      onChanged();
      return this;
    }

    private long equity_ ;
    /**
     * <pre>
     * 当日权益
     * </pre>
     *
     * <code>optional int64 equity = 40;</code>
     */
    public long getEquity() {
      return equity_;
    }
    /**
     * <pre>
     * 当日权益
     * </pre>
     *
     * <code>optional int64 equity = 40;</code>
     */
    public Builder setEquity(long value) {
      
      equity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当日权益
     * </pre>
     *
     * <code>optional int64 equity = 40;</code>
     */
    public Builder clearEquity() {
      
      equity_ = 0L;
      onChanged();
      return this;
    }

    private long marketEquity_ ;
    /**
     * <pre>
     * 市值
     * </pre>
     *
     * <code>optional int64 market_equity = 41;</code>
     */
    public long getMarketEquity() {
      return marketEquity_;
    }
    /**
     * <pre>
     * 市值
     * </pre>
     *
     * <code>optional int64 market_equity = 41;</code>
     */
    public Builder setMarketEquity(long value) {
      
      marketEquity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 市值
     * </pre>
     *
     * <code>optional int64 market_equity = 41;</code>
     */
    public Builder clearMarketEquity() {
      
      marketEquity_ = 0L;
      onChanged();
      return this;
    }

    private long authValue_ ;
    /**
     * <pre>
     * 授信资金
     * </pre>
     *
     * <code>optional int64 auth_value = 42;</code>
     */
    public long getAuthValue() {
      return authValue_;
    }
    /**
     * <pre>
     * 授信资金
     * </pre>
     *
     * <code>optional int64 auth_value = 42;</code>
     */
    public Builder setAuthValue(long value) {
      
      authValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 授信资金
     * </pre>
     *
     * <code>optional int64 auth_value = 42;</code>
     */
    public Builder clearAuthValue() {
      
      authValue_ = 0L;
      onChanged();
      return this;
    }

    private long exchangeRate_ ;
    /**
     * <pre>
     *汇率
     * </pre>
     *
     * <code>optional int64 exchange_rate = 43;</code>
     */
    public long getExchangeRate() {
      return exchangeRate_;
    }
    /**
     * <pre>
     *汇率
     * </pre>
     *
     * <code>optional int64 exchange_rate = 43;</code>
     */
    public Builder setExchangeRate(long value) {
      
      exchangeRate_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *汇率
     * </pre>
     *
     * <code>optional int64 exchange_rate = 43;</code>
     */
    public Builder clearExchangeRate() {
      
      exchangeRate_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.demo.model.proto.gateway.FutureBalance)
  }

  // @@protoc_insertion_point(class_scope:com.demo.model.proto.gateway.FutureBalance)
  private static final FutureBalance DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new FutureBalance();
  }

  public static FutureBalance getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FutureBalance>
      PARSER = new com.google.protobuf.AbstractParser<FutureBalance>() {
    public FutureBalance parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new FutureBalance(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FutureBalance> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<FutureBalance> getParserForType() {
    return PARSER;
  }

  public FutureBalance getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

