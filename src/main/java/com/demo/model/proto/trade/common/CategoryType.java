// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_common_type_def.proto

package com.demo.model.proto.trade.common;

/**
 * <pre>
 * 品种大类
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.trade.common.CategoryType}
 */
public enum CategoryType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 无
   * </pre>
   *
   * <code>UNKNOWN_NONE = 0;</code>
   */
  UNKNOWN_NONE(0),
  /**
   * <pre>
   * 现货
   * </pre>
   *
   * <code>SPOT = 1;</code>
   */
  SPOT(1),
  /**
   * <pre>
   * 期货
   * </pre>
   *
   * <code>FUTURES = 2;</code>
   */
  FUTURES(2),
  /**
   * <pre>
   * 期权
   * </pre>
   *
   * <code>POTION = 3;</code>
   */
  POTION(3),
  /**
   * <pre>
   * 跨期套利
   * </pre>
   *
   * <code>SPREAD_MONTH = 4;</code>
   */
  SPREAD_MONTH(4),
  /**
   * <pre>
   * 跨品种套利
   * </pre>
   *
   * <code>SPREAD_COMMODITY = 5;</code>
   */
  SPREAD_COMMODITY(5),
  /**
   * <pre>
   * 看涨垂直套利
   * </pre>
   *
   * <code>BUL = 6;</code>
   */
  BUL(6),
  /**
   * <pre>
   * 看跌垂直套利
   * </pre>
   *
   * <code>BER = 7;</code>
   */
  BER(7),
  /**
   * <pre>
   * 跨式套利
   * </pre>
   *
   * <code>STD = 8;</code>
   */
  STD(8),
  /**
   * <pre>
   * 宽跨式套利
   * </pre>
   *
   * <code>STG = 9;</code>
   */
  STG(9),
  /**
   * <pre>
   * 备兑组合
   * </pre>
   *
   * <code>PRT = 10;</code>
   */
  PRT(10),
  /**
   * <pre>
   * 外汇——直接汇率
   * </pre>
   *
   * <code>DIRECTFOREX = 11;</code>
   */
  DIRECTFOREX(11),
  /**
   * <pre>
   * 外汇——间接汇率
   * </pre>
   *
   * <code>INDIRECTFOREX = 12;</code>
   */
  INDIRECTFOREX(12),
  /**
   * <pre>
   * 外汇——交叉汇率
   * </pre>
   *
   * <code>CROSSFOREX = 13;</code>
   */
  CROSSFOREX(13),
  /**
   * <pre>
   * 指数
   * </pre>
   *
   * <code>INDEX = 14;</code>
   */
  INDEX(14),
  /**
   * <pre>
   * 股票
   * </pre>
   *
   * <code>STOCK = 15;</code>
   */
  STOCK(15),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 无
   * </pre>
   *
   * <code>UNKNOWN_NONE = 0;</code>
   */
  public static final int UNKNOWN_NONE_VALUE = 0;
  /**
   * <pre>
   * 现货
   * </pre>
   *
   * <code>SPOT = 1;</code>
   */
  public static final int SPOT_VALUE = 1;
  /**
   * <pre>
   * 期货
   * </pre>
   *
   * <code>FUTURES = 2;</code>
   */
  public static final int FUTURES_VALUE = 2;
  /**
   * <pre>
   * 期权
   * </pre>
   *
   * <code>POTION = 3;</code>
   */
  public static final int POTION_VALUE = 3;
  /**
   * <pre>
   * 跨期套利
   * </pre>
   *
   * <code>SPREAD_MONTH = 4;</code>
   */
  public static final int SPREAD_MONTH_VALUE = 4;
  /**
   * <pre>
   * 跨品种套利
   * </pre>
   *
   * <code>SPREAD_COMMODITY = 5;</code>
   */
  public static final int SPREAD_COMMODITY_VALUE = 5;
  /**
   * <pre>
   * 看涨垂直套利
   * </pre>
   *
   * <code>BUL = 6;</code>
   */
  public static final int BUL_VALUE = 6;
  /**
   * <pre>
   * 看跌垂直套利
   * </pre>
   *
   * <code>BER = 7;</code>
   */
  public static final int BER_VALUE = 7;
  /**
   * <pre>
   * 跨式套利
   * </pre>
   *
   * <code>STD = 8;</code>
   */
  public static final int STD_VALUE = 8;
  /**
   * <pre>
   * 宽跨式套利
   * </pre>
   *
   * <code>STG = 9;</code>
   */
  public static final int STG_VALUE = 9;
  /**
   * <pre>
   * 备兑组合
   * </pre>
   *
   * <code>PRT = 10;</code>
   */
  public static final int PRT_VALUE = 10;
  /**
   * <pre>
   * 外汇——直接汇率
   * </pre>
   *
   * <code>DIRECTFOREX = 11;</code>
   */
  public static final int DIRECTFOREX_VALUE = 11;
  /**
   * <pre>
   * 外汇——间接汇率
   * </pre>
   *
   * <code>INDIRECTFOREX = 12;</code>
   */
  public static final int INDIRECTFOREX_VALUE = 12;
  /**
   * <pre>
   * 外汇——交叉汇率
   * </pre>
   *
   * <code>CROSSFOREX = 13;</code>
   */
  public static final int CROSSFOREX_VALUE = 13;
  /**
   * <pre>
   * 指数
   * </pre>
   *
   * <code>INDEX = 14;</code>
   */
  public static final int INDEX_VALUE = 14;
  /**
   * <pre>
   * 股票
   * </pre>
   *
   * <code>STOCK = 15;</code>
   */
  public static final int STOCK_VALUE = 15;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static CategoryType valueOf(int value) {
    return forNumber(value);
  }

  public static CategoryType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_NONE;
      case 1: return SPOT;
      case 2: return FUTURES;
      case 3: return POTION;
      case 4: return SPREAD_MONTH;
      case 5: return SPREAD_COMMODITY;
      case 6: return BUL;
      case 7: return BER;
      case 8: return STD;
      case 9: return STG;
      case 10: return PRT;
      case 11: return DIRECTFOREX;
      case 12: return INDIRECTFOREX;
      case 13: return CROSSFOREX;
      case 14: return INDEX;
      case 15: return STOCK;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CategoryType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CategoryType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CategoryType>() {
          public CategoryType findValueByNumber(int number) {
            return CategoryType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeCommonTypeDef.getDescriptor()
        .getEnumTypes().get(6);
  }

  private static final CategoryType[] VALUES = values();

  public static CategoryType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CategoryType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.trade.common.CategoryType)
}

