// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_common_type_def.proto

package com.demo.model.proto.trade.common;

/**
 * <pre>
 * 品种类型定义
 * </pre>
 *
 * Protobuf enum {@code com.demo.model.proto.trade.common.ProductType}
 */
public enum ProductType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 未知
   * </pre>
   *
   * <code>UNKNOWN_PRODUCT = 0;</code>
   */
  UNKNOWN_PRODUCT(0),
  /**
   * <pre>
   * 注 1--- 10 期货子分类        
   * </pre>
   *
   * <code>EQUITY_INDEX_FUTURE = 1;</code>
   */
  EQUITY_INDEX_FUTURE(1),
  /**
   * <pre>
   * 个股期货
   * </pre>
   *
   * <code>SINGLE_STOCK_FUTURE = 2;</code>
   */
  SINGLE_STOCK_FUTURE(2),
  /**
   * <pre>
   * 外汇期货
   * </pre>
   *
   * <code>FOREIGN_EXCHANGE_FUTURE = 3;</code>
   */
  FOREIGN_EXCHANGE_FUTURE(3),
  /**
   * <pre>
   * 利率期货
   * </pre>
   *
   * <code>INTEREST_RATE_FUTURE = 4;</code>
   */
  INTEREST_RATE_FUTURE(4),
  /**
   * <pre>
   * 商品期货
   * </pre>
   *
   * <code>COMMODITIES_FUTURE = 5;</code>
   */
  COMMODITIES_FUTURE(5),
  /**
   * <pre>
   * 能源化工期货
   * </pre>
   *
   * <code>ENERGY_CHEMICAL_FUTURE = 6;</code>
   */
  ENERGY_CHEMICAL_FUTURE(6),
  /**
   * <pre>
   * 金属期货
   * </pre>
   *
   * <code>METAL_FUTURE = 7;</code>
   */
  METAL_FUTURE(7),
  /**
   * <pre>
   * 农产品期货
   * </pre>
   *
   * <code>AGRICULTURAL_COMMODITY_FUTURE = 8;</code>
   */
  AGRICULTURAL_COMMODITY_FUTURE(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 未知
   * </pre>
   *
   * <code>UNKNOWN_PRODUCT = 0;</code>
   */
  public static final int UNKNOWN_PRODUCT_VALUE = 0;
  /**
   * <pre>
   * 注 1--- 10 期货子分类        
   * </pre>
   *
   * <code>EQUITY_INDEX_FUTURE = 1;</code>
   */
  public static final int EQUITY_INDEX_FUTURE_VALUE = 1;
  /**
   * <pre>
   * 个股期货
   * </pre>
   *
   * <code>SINGLE_STOCK_FUTURE = 2;</code>
   */
  public static final int SINGLE_STOCK_FUTURE_VALUE = 2;
  /**
   * <pre>
   * 外汇期货
   * </pre>
   *
   * <code>FOREIGN_EXCHANGE_FUTURE = 3;</code>
   */
  public static final int FOREIGN_EXCHANGE_FUTURE_VALUE = 3;
  /**
   * <pre>
   * 利率期货
   * </pre>
   *
   * <code>INTEREST_RATE_FUTURE = 4;</code>
   */
  public static final int INTEREST_RATE_FUTURE_VALUE = 4;
  /**
   * <pre>
   * 商品期货
   * </pre>
   *
   * <code>COMMODITIES_FUTURE = 5;</code>
   */
  public static final int COMMODITIES_FUTURE_VALUE = 5;
  /**
   * <pre>
   * 能源化工期货
   * </pre>
   *
   * <code>ENERGY_CHEMICAL_FUTURE = 6;</code>
   */
  public static final int ENERGY_CHEMICAL_FUTURE_VALUE = 6;
  /**
   * <pre>
   * 金属期货
   * </pre>
   *
   * <code>METAL_FUTURE = 7;</code>
   */
  public static final int METAL_FUTURE_VALUE = 7;
  /**
   * <pre>
   * 农产品期货
   * </pre>
   *
   * <code>AGRICULTURAL_COMMODITY_FUTURE = 8;</code>
   */
  public static final int AGRICULTURAL_COMMODITY_FUTURE_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static ProductType valueOf(int value) {
    return forNumber(value);
  }

  public static ProductType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_PRODUCT;
      case 1: return EQUITY_INDEX_FUTURE;
      case 2: return SINGLE_STOCK_FUTURE;
      case 3: return FOREIGN_EXCHANGE_FUTURE;
      case 4: return INTEREST_RATE_FUTURE;
      case 5: return COMMODITIES_FUTURE;
      case 6: return ENERGY_CHEMICAL_FUTURE;
      case 7: return METAL_FUTURE;
      case 8: return AGRICULTURAL_COMMODITY_FUTURE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ProductType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ProductType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ProductType>() {
          public ProductType findValueByNumber(int number) {
            return ProductType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return TradeCommonTypeDef.getDescriptor()
        .getEnumTypes().get(7);
  }

  private static final ProductType[] VALUES = values();

  public static ProductType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ProductType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.model.proto.trade.common.ProductType)
}

